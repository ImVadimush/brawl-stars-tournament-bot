# main.py
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ Brawl Stars
"""

import uvicorn
import asyncio
import logging
import random
from fastapi import FastAPI
from threading import Thread
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    Poll, Message, Chat, User, BotCommand
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    PollAnswerHandler, ContextTypes, MessageHandler, filters, ApplicationBuilder
)

from config import (
    BOT_TOKEN, OWNER_ID, USER_ROLES, TOURNAMENT_FORMATS,
    GAME_MODES, MESSAGES, EMOJIS, SCHEDULED_TOURNAMENT_HOURS, BOT_COMMANDS,
    MIN_TOURNAMENT_PARTICIPANTS
)
from database import DatabaseManager
from maps import map_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db = DatabaseManager()
active_tournaments = {}  # chat_id: tournament_data
active_polls = {}  # poll_id: poll_data
user_participation_tracker = {}  # chat_id: {user_id: bool} - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–∏—è
match_scores = {}  # match_id: {'team1_wins': 0, 'team2_wins': 0} - —Å—á—ë—Ç –º–∞—Ç—á–µ–π

app = FastAPI()

@app.get("/healthz")
async def health_check():
    return {"status": "ok"}

def run_web():
    uvicorn.run(app, host="0.0.0.0", port=8080)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Markdown
def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown v2"""
    if not text:
        return ""
    
    text = str(text)
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown v2
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    
    return text

def clean_markdown(text):
    """–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ Markdown —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
    
    text = str(text)
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    problematic_chars = ['*', '_', '`', '[', ']', '(', ')', '~', '>', '#']
    
    for char in problematic_chars:
        text = text.replace(char, '')
    
    return text

def get_rank_by_xp(xp):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ –ø–æ –æ–ø—ã—Ç—É"""
    if xp >= 1000:
        return "üëë –õ–µ–≥–µ–Ω–¥–∞"
    elif xp >= 500:
        return "üèÜ –ú–∞—Å—Ç–µ—Ä"
    elif xp >= 200:
        return "üéñÔ∏è –≠–∫—Å–ø–µ—Ä—Ç"
    elif xp >= 50:
        return "ü•â –õ—é–±–∏—Ç–µ–ª—å"
    else:
        return "üôã –ù–æ–≤–∏—á–æ–∫"

def check_tournament_start_conditions(tournament):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–æ 6 –∫–æ–º–∞–Ω–¥"""
    format_type = tournament.get('format', '1v1')
    participants_count = len(tournament.get('participants', []))
    min_participants = MIN_TOURNAMENT_PARTICIPANTS.get(format_type, 2)
    
    if participants_count < min_participants:
        return False, f"–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min_participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! (–µ—Å—Ç—å {participants_count})"
    
    if format_type == '2v2':
        # –î–ª—è 2v2 –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ 2 –∏–≥—Ä–æ–∫–∞
        full_teams = participants_count // 2
        if full_teams < 2:  # –ú–∏–Ω–∏–º—É–º 2 –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
            needed_players = 4 - participants_count
            return False, f"–î–ª—è 2v2 –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞ (2 –∫–æ–º–∞–Ω–¥—ã). –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {needed_players}"
        
        # –ú–∞–∫—Å–∏–º—É–º 6 –∫–æ–º–∞–Ω–¥ (12 –∏–≥—Ä–æ–∫–æ–≤)
        if participants_count > 12:
            return False, "–ú–∞–∫—Å–∏–º—É–º 12 –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ 2v2 (6 –∫–æ–º–∞–Ω–¥)"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏—à–Ω–∏–π –∏–≥—Ä–æ–∫, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        if participants_count % 2 != 0:
            return False, f"–î–ª—è 2v2 –Ω—É–∂–Ω–æ —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤. –õ–∏—à–Ω–∏–π –∏–≥—Ä–æ–∫: 1"
            
    elif format_type == '3v3':
        # –î–ª—è 3v3 –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ 3 –∏–≥—Ä–æ–∫–∞
        full_teams = participants_count // 3
        if full_teams < 2:  # –ú–∏–Ω–∏–º—É–º 2 –∫–æ–º–∞–Ω–¥—ã
            needed_players = 6 - participants_count
            return False, f"–î–ª—è 3v3 –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 6 –∏–≥—Ä–æ–∫–æ–≤ (2 –∫–æ–º–∞–Ω–¥—ã). –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {needed_players}"
        
        # –ú–∞–∫—Å–∏–º—É–º 6 –∫–æ–º–∞–Ω–¥ (18 –∏–≥—Ä–æ–∫–æ–≤)
        if participants_count > 18:
            return False, "–ú–∞–∫—Å–∏–º—É–º 18 –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ 3v3 (6 –∫–æ–º–∞–Ω–¥)"
        
        # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 3, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        remainder = participants_count % 3
        if remainder != 0:
            needed_to_complete = 3 - remainder
            return False, f"–î–ª—è 3v3 —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –¥–µ–ª–∏—Ç—å—Å—è –Ω–∞ 3. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–æ –ø–æ–ª–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {needed_to_complete}"
    
    return True, "–ì–æ—Ç–æ–≤ –∫ —Å—Ç–∞—Ä—Ç—É!"

class TournamentBot:
    def __init__(self):
        self.db = db
    
    async def get_team_names(self, team, context, chat_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        names = []
        for user_id in team:
            try:
                user = await context.bot.get_chat_member(chat_id, user_id)
                username = user.user.username or user.user.first_name
                
                # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç Markdown —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                clean_username = clean_markdown(str(username))
                
                if user.user.username:
                    names.append(f"@{clean_username}")
                else:
                    names.append(clean_username)
            except Exception as e:
                logger.error(f"Error getting user {user_id}: {e}")
                names.append(f"User{user_id}")
        
        return " + ".join(names)

    async def show_current_round(self, query, context):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞"""
        chat_id = query.message.chat_id
        tournament = active_tournaments[chat_id]
        bracket = tournament.get('bracket', {})
        current_round = bracket.get('current_round', 'round_1')
        matches = bracket.get(current_round, [])
        
        if not matches:
            await self.finish_tournament(query, context)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
        total_matches = len(matches)
        if total_matches == 1:
            round_name = "üèÜ –§–ò–ù–ê–õ –¢–£–†–ù–ò–†–ê!"
        elif total_matches == 2:
            round_name = "üéØ –ü–û–õ–£–§–ò–ù–ê–õ!"
        else:
            round_name = f"‚öîÔ∏è –†–∞—É–Ω–¥ {current_round.split('_')[1]}"
        
        matches_text = []
        keyboard = []
        
        for match in matches:
            if match.get('winner') is None:
                team1_names = await self.get_team_names(match['team1'], context, chat_id)
                team2_names = await self.get_team_names(match['team2'], context, chat_id)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—á—ë—Ç –º–∞—Ç—á–∞
                match_id = match.get('match_id', 0)
                score = match_scores.get(match_id, {'team1_wins': 0, 'team2_wins': 0})
                score_text = f"({score['team1_wins']}:{score['team2_wins']})"
                
                match_text = f"üü• {team1_names} üÜö üü¶ {team2_names} {score_text}"
                matches_text.append(match_text)
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤—ã—à–µ)
                user = self.db.get_user(query.from_user.id)
                if user and user.get('role') in ['moderator', 'admin', 'owner'] or query.from_user.id == OWNER_ID:
                    keyboard.append([
                        InlineKeyboardButton(f"üèÜ –ö–æ–º–∞–Ω–¥–∞ 1", 
                                           callback_data=f"match_winner_{match_id}_team1"),
                        InlineKeyboardButton(f"üèÜ –ö–æ–º–∞–Ω–¥–∞ 2", 
                                           callback_data=f"match_winner_{match_id}_team2")
                    ])
        
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        format_name = TOURNAMENT_FORMATS.get(tournament.get('format', '1v1'), tournament.get('format', '1v1'))
        
        message_text = f"{round_name}\n\n"
        message_text += f"–§–æ—Ä–º–∞—Ç: {format_name}\n"
        message_text += f"–ü–æ–±–µ–¥ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {tournament.get('wins_needed', 1)}\n"
        
        if tournament.get('selected_modes'):
            modes_list = ", ".join(tournament['selected_modes'])
            message_text += f"–†–µ–∂–∏–º—ã: {modes_list}\n"
        
        message_text += f"\n–ú–∞—Ç—á–∏:\n"
        message_text += "\n".join(matches_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            await query.edit_message_text(
                message_text,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            simple_text = f"{round_name}\n\n–ú–∞—Ç—á–∏:\n" + "\n".join(matches_text)
            try:
                await query.edit_message_text(
                    simple_text,
                    reply_markup=reply_markup
                )
            except Exception as final_error:
                logger.error(f"Final fallback failed: {final_error}")

    async def update_tournament_message(self, query, context):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
        chat_id = query.message.chat_id
        tournament = active_tournaments[chat_id]
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="join_tournament")],
            [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏", callback_data="leave_tournament")]
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        can_start, status_message = check_tournament_start_conditions(tournament)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è —Å–æ–±–ª—é–¥–µ–Ω—ã
        if can_start and query.from_user.id == tournament.get('creator'):
            keyboard.append([InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä!", callback_data="start_bracket")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants_list = []
        for i, participant_id in enumerate(tournament.get('participants', []), 1):
            try:
                user = await context.bot.get_chat_member(chat_id, participant_id)
                username = user.user.username or user.user.first_name
                
                # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                clean_username = str(username).replace("*", "").replace("_", "").replace("`", "").replace("[", "").replace("]", "")
                
                if user.user.username:
                    participants_list.append(f"{i}. @{clean_username}")
                else:
                    participants_list.append(f"{i}. {clean_username}")
            except Exception as e:
                logger.error(f"Error getting participant {participant_id}: {e}")
                participants_list.append(f"{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {participant_id}")
        
        format_name = TOURNAMENT_FORMATS.get(tournament.get('format', '1v1'), tournament.get('format', '1v1'))
        
        # Base message text (–∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
        message_text = (
            f"‚öîÔ∏è –¢—É—Ä–Ω–∏—Ä {format_name}\n\n"
            f"üèÜ –ü–æ–±–µ–¥ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {tournament.get('wins_needed', 1)}\n"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º—ã —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if tournament.get('selected_modes'):
            modes_list = ", ".join(tournament['selected_modes'])
            message_text += f"üéÆ –†–µ–∂–∏–º—ã: {modes_list}\n"
        
        # Add maps info
        if tournament.get('maps'):
            try:
                maps_text = map_manager.format_selected_maps(tournament['maps'])
                # –û—á–∏—â–∞–µ–º maps_text –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                clean_maps_text = maps_text.replace("*", "").replace("_", "")
                message_text += f"\nüó∫ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:\n{clean_maps_text}\n"
            except Exception as e:
                logger.error(f"Error formatting maps: {e}")
        
        message_text += "\n"
        
        # Add participants list
        if participants_list:
            participants_text = "\n".join(participants_list)
            message_text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(participants_list)}):\n{participants_text}\n\n"
        else:
            message_text += "üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n\n"
        
        # Show status message
        message_text += f"‚ö†Ô∏è {status_message}"
        if can_start:
            message_text += " (–°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä)"
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await query.edit_message_text(
                message_text,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error editing tournament message: {e}")
            # –ï—Å–ª–∏ –∏ –±–µ–∑ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
            try:
                simple_text = f"–¢—É—Ä–Ω–∏—Ä {format_name}\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament.get('participants', []))}"
                await query.edit_message_text(
                    simple_text,
                    reply_markup=reply_markup
                )
            except Exception as final_error:
                logger.error(f"Final fallback failed: {final_error}")
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
                pass

    async def confirm_modes_selection(self, query, context):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        chat_id = query.message.chat_id
        tournament = active_tournaments[chat_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
        if query.from_user.id != tournament.get('creator'):
            await query.answer("‚ùó –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–∞—Ä—Ç
        try:
            selected_maps = map_manager.get_random_maps_for_modes(tournament.get('selected_modes', []))
            tournament['maps'] = selected_maps
        except Exception as e:
            logger.error(f"Error selecting maps: {e}")
            tournament['maps'] = {}
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            tournament_id = self.db.create_tournament(
                chat_id=chat_id,
                format_type=tournament.get('format', '1v1'),
                wins_needed=tournament.get('wins_needed', 1),
                modes=tournament.get('selected_modes', []),
                maps=tournament.get('maps', {})
            )
            tournament['id'] = tournament_id
        except Exception as e:
            logger.error(f"Error creating tournament in DB: {e}")
            tournament['id'] = None
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="join_tournament")],
            [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏", callback_data="leave_tournament")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        format_name = TOURNAMENT_FORMATS.get(tournament.get('format', '1v1'), tournament.get('format', '1v1'))
        modes_list = ", ".join(tournament.get('selected_modes', []))
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message_text = f"üéÆ –¢—É—Ä–Ω–∏—Ä {format_name} —Å–æ–∑–¥–∞–Ω!\n\n"
        message_text += f"üèÜ –ü–æ–±–µ–¥ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {tournament.get('wins_needed', 1)}\n"
        message_text += f"üéÆ –†–µ–∂–∏–º—ã: {modes_list}\n"
        message_text += f"üó∫ –ö–∞—Ä—Ç—ã –≤—ã–±—Ä–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        
        min_participants = MIN_TOURNAMENT_PARTICIPANTS.get(tournament.get('format', '1v1'), 2)
        message_text += f"‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞: {min_participants}\n\n"
        message_text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!"
        
        tournament['message_id'] = query.message.message_id
        
        try:
            await query.edit_message_text(
                message_text,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error in confirm_modes_selection: {e}")
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            simple_text = f"–¢—É—Ä–Ω–∏—Ä {format_name} —Å–æ–∑–¥–∞–Ω! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å!"
            await query.edit_message_text(
                simple_text,
                reply_markup=reply_markup
            )

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if update.effective_chat.type == 'private':
            await self.send_private_welcome(update, context)
        else:
            if update.message:
                await self.send_welcome_message(update, context)
            else:
                keyboard = [
                    [
                        InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="start_tournament"),
                        InlineKeyboardButton("üóì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_tournament")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=MESSAGES.get("welcome", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"),
                    reply_markup=reply_markup
                )
    
    async def send_private_welcome(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –∫–ª—É–±–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_id = update.effective_user.id
        try:
            self.db.add_user(user_id, update.effective_user.username, update.effective_user.first_name)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            user = self.db.get_user(user_id)
            if not user or not user.get('clan') or user.get('clan') == '–ù–µ —É–∫–∞–∑–∞–Ω':
                self.db.update_user_clan(user_id, 'FairDragons')
        except Exception as e:
            logger.error(f"Error setting up user: {e}")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
        bot_username = context.bot.username
        add_to_group_url = f"https://t.me/{bot_username}?startgroup=true"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=add_to_group_url)],
            [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Brawl Stars Tournament Bot!

üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! –Ø –ø–æ–º–æ–≥–∞—é –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –∫—Ä—É—Ç—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ Brawl Stars –ø—Ä—è–º–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö Telegram.

1. –ß—Ç–æ —è —É–º–µ—é:              

üéÆ –¢—É—Ä–Ω–∏—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ 1v1, 2v2, 3v3
   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–∞—Ä—Ç
   ‚Ä¢ –ß–µ—Å—Ç–Ω–∞—è —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞

üóì –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤
   ‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —É—á–∞—Å—Ç–∏–µ
   ‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö

üìä –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥ –∏ —É—á–∞—Å—Ç–∏–π
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ–ø—ã—Ç–∞ –∏ —Ä–∞–Ω–≥–æ–≤
   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—É–±–∫–æ–≤

üîê –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π
   ‚Ä¢ –†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç—É–ø–∞
   ‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤

2. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:          

‚Ä¢ /profile - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ /setcups [—á–∏—Å–ª–æ] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É–±–∫–∏
‚Ä¢ /help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /ranks - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–Ω–≥–∞—Ö

3. –ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?    

1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
2Ô∏è‚É£ –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üéÆ –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä"
4Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
5Ô∏è‚É£ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏–≥—Ä–æ–π!

–ì–æ—Ç–æ–≤ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º? –î–æ–±–∞–≤–ª—è–π—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É! üöÄ"""
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup
        )
    
    async def send_welcome_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        keyboard = [
            [
                InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="start_tournament"),
                InlineKeyboardButton("üóì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_tournament")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if update.message and update.message.message_id:
                await update.message.reply_text(
                    MESSAGES.get("welcome", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"),
                    reply_markup=reply_markup
                )
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º send_message –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=MESSAGES.get("welcome", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"),
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ markdown
            try:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                    reply_markup=reply_markup
                )
            except Exception as fallback_error:
                logger.error(f"–†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {fallback_error}")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        chat_id = query.message.chat_id
        user_id = query.from_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            self.db.add_user(user_id, query.from_user.username, query.from_user.first_name)
        except Exception as e:
            logger.error(f"Error adding user: {e}")
        
        if data == "start_tournament":
            await self.start_tournament_setup(query, context)
        elif data == "schedule_tournament":
            await self.schedule_tournament(query, context)
        elif data.startswith("tournament_format_"):
            format_type = data.replace("tournament_format_", "")
            await self.select_tournament_format(query, context, format_type)
        elif data.startswith("wins_needed_"):
            wins = int(data.replace("wins_needed_", ""))
            await self.set_wins_needed(query, context, wins)
        elif data.startswith("modes_count_"):
            count = int(data.replace("modes_count_", ""))
            await self.select_modes_count(query, context, count)
        elif data.startswith("mode_"):
            mode = data.replace("mode_", "").replace("_", " ")
            await self.toggle_game_mode(query, context, mode)
        elif data == "confirm_modes":
            await self.confirm_modes_selection(query, context)
        elif data == "join_tournament":
            await self.join_tournament(query, context)
        elif data == "leave_tournament":
            await self.leave_tournament(query, context)
        elif data == "show_profile":
            await self.show_profile_callback(query, context)
        elif data == "start_bracket":
            await self.start_tournament_bracket(query, context)
        elif data.startswith("match_winner_"):
            await self.set_match_winner(query, context, data)
        elif data == "back_to_main":
            await self.send_private_welcome_edit(query, context)
        elif data == "edit_clan":
            await self.edit_clan_prompt(query, context)
        elif data == "edit_trophies":
            await self.edit_trophies_prompt(query, context)
        elif data == "change_rank":
            await self.show_ranks_info(query, context)
        elif data == "schedule_next_tournament":
            await self.schedule_tournament(query, context)
        elif data == "top_trophies":
            await self.show_top_trophies(query, context)
        elif data == "top_experience":
            await self.show_top_experience(query, context)
        elif data == "top_wins":
            await self.show_top_wins(query, context)
        elif data == "top_participations":
            await self.show_top_participations(query, context)
        elif data == "back_to_top":
            await self.show_top_callback(query, context)
    
    async def start_tournament_setup(self, query, context):
        """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞"""
        try:
            user = self.db.get_user(query.from_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –∏ –≤—ã—à–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã)
            if not user or user.get('role') not in ['admin', 'owner'] and query.from_user.id != OWNER_ID:
                await query.edit_message_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤!\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã."
                )
                return
        except Exception as e:
            logger.error(f"Error checking user permissions: {e}")
            if query.from_user.id != OWNER_ID:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
                return
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        keyboard = [
            [InlineKeyboardButton("‚öîÔ∏è 1v1", callback_data="tournament_format_1v1")],
            [InlineKeyboardButton("ü§ù 2v2", callback_data="tournament_format_2v2")],
            [InlineKeyboardButton("üë• 3v3", callback_data="tournament_format_3v3")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
            "‚öîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞:",
            reply_markup=reply_markup
        )
    
    async def select_tournament_format(self, query, context, format_type):
        """–í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞"""
        chat_id = query.message.chat_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
        if chat_id in active_tournaments and query.from_user.id != active_tournaments[chat_id].get('creator'):
            await query.answer("‚ùó –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
        active_tournaments[chat_id] = {
            'creator': query.from_user.id,
            'format': format_type,
            'wins_needed': None,
            'modes_count': None,
            'selected_modes': [],
            'maps': {},
            'participants': [],
            'bracket': {},
            'current_round': 'registration'
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä —É—á–∞—Å—Ç–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        if chat_id not in user_participation_tracker:
            user_participation_tracker[chat_id] = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        try:
            available_modes = map_manager.get_all_modes_for_format(format_type)
        except Exception as e:
            logger.error(f"Error getting modes for format {format_type}: {e}")
            available_modes = ["–†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"]
        
        if format_type == "1v1":
            # –î–ª—è 1v1 —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ–∂–∏–º - –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ
            active_tournaments[chat_id]['modes_count'] = 1
            active_tournaments[chat_id]['selected_modes'] = available_modes
            
            keyboard = [
                [InlineKeyboardButton("1 –ø–æ–±–µ–¥–∞", callback_data="wins_needed_1")],
                [InlineKeyboardButton("2 –ø–æ–±–µ–¥—ã", callback_data="wins_needed_2")],
                [InlineKeyboardButton("3 –ø–æ–±–µ–¥—ã", callback_data="wins_needed_3")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚úÖ –§–æ—Ä–º–∞—Ç: {TOURNAMENT_FORMATS.get(format_type, format_type)}\n"
                f"‚úÖ –†–µ–∂–∏–º: {available_modes[0] if available_modes else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n\n"
                "üèÜ –°–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥ –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è?",
                reply_markup=reply_markup
            )
        else:
            # –î–ª—è 2v2 –∏ 3v3 –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∂–∏–º–æ–≤
            keyboard = [
                [InlineKeyboardButton("1 —Ä–µ–∂–∏–º", callback_data="modes_count_1")],
                [InlineKeyboardButton("2 —Ä–µ–∂–∏–º–∞", callback_data="modes_count_2")],
                [InlineKeyboardButton("3 —Ä–µ–∂–∏–º–∞", callback_data="modes_count_3")],
                [InlineKeyboardButton("4 —Ä–µ–∂–∏–º–∞", callback_data="modes_count_4")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚úÖ –§–æ—Ä–º–∞—Ç: {TOURNAMENT_FORMATS.get(format_type, format_type)}\n\n"
                "üéÆ –°–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤ –±—É–¥–µ—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ?",
                reply_markup=reply_markup
            )
    
    async def set_wins_needed(self, query, context, wins):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥"""
        chat_id = query.message.chat_id
        tournament = active_tournaments.get(chat_id, {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
        if query.from_user.id != tournament.get('creator'):
            await query.answer("‚ùó –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return
        
        tournament['wins_needed'] = wins
        
        if tournament.get('format') == '1v1':
            # –î–ª—è 1v1 —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            await self.confirm_modes_selection(query, context)
        else:
            # –î–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–æ–≤
            await self.show_modes_selection(query, context)
    
    async def select_modes_count(self, query, context, count):
        """–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∂–∏–º–æ–≤"""
        chat_id = query.message.chat_id
        tournament = active_tournaments.get(chat_id, {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
        if query.from_user.id != tournament.get('creator'):
            await query.answer("‚ùó –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return
        
        active_tournaments[chat_id]['modes_count'] = count
        
        keyboard = [
            [InlineKeyboardButton("1 –ø–æ–±–µ–¥–∞", callback_data="wins_needed_1")],
            [InlineKeyboardButton("2 –ø–æ–±–µ–¥—ã", callback_data="wins_needed_2")],
            [InlineKeyboardButton("3 –ø–æ–±–µ–¥—ã", callback_data="wins_needed_3")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚úÖ –†–µ–∂–∏–º–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: {count}\n\n"
            "üèÜ –°–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥ –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è?",
            reply_markup=reply_markup
        )
    
    async def show_modes_selection(self, query, context):
        """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–≤—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
        chat_id = query.message.chat_id
        tournament = active_tournaments.get(chat_id, {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
        if query.from_user.id != tournament.get('creator'):
            await query.answer("‚ùó –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return
        
        modes_needed = tournament.get('modes_count', 1)
        format_type = tournament.get('format', '1v1')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        try:
            available_modes = map_manager.get_all_modes_for_format(format_type)
        except Exception as e:
            logger.error(f"Error getting modes: {e}")
            available_modes = ["–†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"]
        
        keyboard = []
        for mode in available_modes:
            emoji = "‚úÖ" if mode in tournament.get('selected_modes', []) else "‚òê"
            callback_data = f"mode_{mode.replace(' ', '_').replace('(', '').replace(')', '')}"
            keyboard.append([InlineKeyboardButton(f"{emoji} {mode}", callback_data=callback_data)])
        
        if len(tournament.get('selected_modes', [])) == modes_needed:
            keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="confirm_modes")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        selected_text = "\n".join([f"‚Ä¢ {mode}" for mode in tournament.get('selected_modes', [])])
        
        await query.edit_message_text(
            f"üéÆ –í—ã–±–µ—Ä–∏—Ç–µ {modes_needed} —Ä–µ–∂–∏–º(–æ–≤):\n\n"
            f"–í—ã–±—Ä–∞–Ω–æ ({len(tournament.get('selected_modes', []))}/{modes_needed}):\n"
            f"{selected_text}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∂–∏–º—ã –¥–ª—è –≤—ã–±–æ—Ä–∞:",
            reply_markup=reply_markup
        )
    
    async def toggle_game_mode(self, query, context, mode):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        chat_id = query.message.chat_id
        tournament = active_tournaments.get(chat_id, {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
        if query.from_user.id != tournament.get('creator'):
            await query.answer("‚ùó –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return
        
        format_type = tournament.get('format', '1v1')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        try:
            available_modes = map_manager.get_all_modes_for_format(format_type)
        except Exception as e:
            logger.error(f"Error getting modes: {e}")
            available_modes = ["–†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"]
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞
        actual_mode = None
        for game_mode in available_modes:
            if mode.replace("_", " ") in game_mode or game_mode.replace(" ", "_").replace("(", "").replace(")", "") == mode:
                actual_mode = game_mode
                break
        
        if actual_mode:
            selected_modes = tournament.get('selected_modes', [])
            if actual_mode in selected_modes:
                selected_modes.remove(actual_mode)
            else:
                if len(selected_modes) < tournament.get('modes_count', 1):
                    selected_modes.append(actual_mode)
            tournament['selected_modes'] = selected_modes
        
        await self.show_modes_selection(query, context)
    
    async def join_tournament(self, query, context):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É"""
        chat_id = query.message.chat_id
        user_id = query.from_user.id
        
        if chat_id not in active_tournaments:
            await query.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        tournament = active_tournaments[chat_id]
        
        if user_id in tournament.get('participants', []):
            await query.answer("‚ÑπÔ∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ!")
            return
        
        tournament.setdefault('participants', []).append(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ
        if chat_id not in user_participation_tracker:
            user_participation_tracker[chat_id] = {}
        
        if user_id not in user_participation_tracker[chat_id]:
            try:
                self.db.add_tournament_participation(user_id)
                user_participation_tracker[chat_id][user_id] = True
            except Exception as e:
                logger.error(f"Error adding participation: {e}")
        
        await self.update_tournament_message(query, context)
        await query.answer("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É!")
    
    async def leave_tournament(self, query, context):
        """–í—ã—Ö–æ–¥ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞"""
        chat_id = query.message.chat_id
        user_id = query.from_user.id
        
        if chat_id not in active_tournaments:
            await query.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        tournament = active_tournaments[chat_id]
        
        if user_id not in tournament.get('participants', []):
            await query.answer("‚ÑπÔ∏è –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ!")
            return
        
        tournament.get('participants', []).remove(user_id)
        
        await self.update_tournament_message(query, context)
        await query.answer("‚ùå –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ç—É—Ä–Ω–∏—Ä!")
    
    async def start_tournament_bracket(self, query, context):
        """–ó–∞–ø—É—Å–∫ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏"""
        chat_id = query.message.chat_id
        tournament = active_tournaments.get(chat_id, {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
        if query.from_user.id != tournament.get('creator'):
            await query.answer("‚ùó –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
        can_start, error_message = check_tournament_start_conditions(tournament)
        if not can_start:
            await query.answer(f"‚ùå {error_message}")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            if tournament.get('id'):
                self.db.update_tournament_participants(tournament['id'], tournament.get('participants', []))
        except Exception as e:
            logger.error(f"Error updating participants: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É
        await self.create_tournament_bracket(query, context)
    
    async def create_tournament_bracket(self, query, context):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏"""
        chat_id = query.message.chat_id
        tournament = active_tournaments.get(chat_id, {})
        participants = tournament.get('participants', []).copy()
        random.shuffle(participants)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        
        format_type = tournament.get('format', '1v1')
        
        if format_type == '1v1':
            matches = self.create_1v1_bracket(participants)
        else:  # 2v2 –∏–ª–∏ 3v3
            matches = self.create_team_bracket(participants, format_type)
        
        tournament['bracket'] = {
            'round_1': matches,
            'current_round': 'round_1',
            'winners': []
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á—ë—Ç –¥–ª—è –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
        for match in matches:
            match_id = match.get('match_id', 0)
            match_scores[match_id] = {'team1_wins': 0, 'team2_wins': 0}
        
        try:
            if tournament.get('id'):
                self.db.update_tournament_bracket(tournament['id'], tournament['bracket'])
        except Exception as e:
            logger.error(f"Error updating bracket: {e}")
        
        await self.show_current_round(query, context)
    
    def create_1v1_bracket(self, participants):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –¥–ª—è 1v1"""
        matches = []
        for i in range(0, len(participants), 2):
            if i + 1 < len(participants):
                matches.append({
                    'team1': [participants[i]],
                    'team2': [participants[i+1]],
                    'winner': None,
                    'match_id': len(matches)
                })
        return matches
    
    def create_team_bracket(self, participants, format_type):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
        team_size = 2 if format_type == '2v2' else 3
        matches = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        teams = []
        for i in range(0, len(participants), team_size):
            team = participants[i:i+team_size]
            if len(team) == team_size:
                teams.append(team)
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        for i in range(0, len(teams), 2):
            if i + 1 < len(teams):
                matches.append({
                    'team1': teams[i],
                    'team2': teams[i+1],
                    'winner': None,
                    'match_id': len(matches)
                })
        
        return matches
    
    async def set_match_winner(self, query, context, callback_data):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –º–∞—Ç—á–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Best of N"""
        parts = callback_data.split('_')
        if len(parts) < 4:
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞!")
            return
            
        try:
            match_id = int(parts[2])
            winning_team = parts[3]
        except (ValueError, IndexError):
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞!")
            return
        
        chat_id = query.message.chat_id
        tournament = active_tournaments.get(chat_id, {})
        bracket = tournament.get('bracket', {})
        current_round = bracket.get('current_round', 'round_1')
        matches = bracket.get(current_round, [])
        wins_needed = tournament.get('wins_needed', 1)
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç—á –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥—É
        match = None
        for m in matches:
            if m.get('match_id') == match_id:
                match = m
                break
        
        if not match or match.get('winner') is not None:
            await query.answer("‚ùå –ú–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç
        if match_id not in match_scores:
            match_scores[match_id] = {'team1_wins': 0, 'team2_wins': 0}
        
        if winning_team == 'team1':
            match_scores[match_id]['team1_wins'] += 1
            winner_team = match.get('team1', [])
        else:
            match_scores[match_id]['team2_wins'] += 1
            winner_team = match.get('team2', [])
        
        team1_wins = match_scores[match_id]['team1_wins']
        team2_wins = match_scores[match_id]['team2_wins']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ä–∞—É–Ω–¥–∞
        winner_names = await self.get_team_names(winner_team, context, chat_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –∫—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥
        if team1_wins >= wins_needed:
            match['winner'] = match['team1']
            final_winner_names = await self.get_team_names(match['team1'], context, chat_id)
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –º–∞—Ç—á–∞: {final_winner_names}\n–ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: {team1_wins}:{team2_wins}"
            )
        elif team2_wins >= wins_needed:
            match['winner'] = match['team2']
            final_winner_names = await self.get_team_names(match['team2'], context, chat_id)
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –º–∞—Ç—á–∞: {final_winner_names}\n–ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: {team1_wins}:{team2_wins}"
            )
        else:
            # –ú–∞—Ç—á –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–∞: {winner_names}\n–°—á—ë—Ç: {team1_wins}:{team2_wins}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –≤–µ—Å—å —Ä–∞—É–Ω–¥
        all_finished = all(match.get('winner') is not None for match in matches)
        
        if all_finished:
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            winners = [match.get('winner', []) for match in matches if match.get('winner')]
            winners_flat = [player for team in winners for player in team]
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ 1 –ø–æ–±–µ–¥–∏—Ç–µ–ª—å - —Ç—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω
            if len(winners) == 1:
                # –¢–£–†–ù–ò–† –ó–ê–í–ï–†–®–ï–ù - –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
                tournament['bracket']['winners'] = winners_flat
                await self.finish_tournament(query, context)
            else:
                # –°–æ–∑–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
                next_round = f"round_{int(current_round.split('_')[1]) + 1}"
                if tournament.get('format') == '1v1':
                    next_matches = self.create_1v1_bracket(winners_flat)
                else:
                    next_matches = self.create_team_bracket(winners_flat, tournament.get('format', '2v2'))
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á—ë—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π
                for new_match in next_matches:
                    match_scores[new_match.get('match_id', 0)] = {'team1_wins': 0, 'team2_wins': 0}
                
                bracket[next_round] = next_matches
                bracket['current_round'] = next_round
                
                try:
                    if tournament.get('id'):
                        self.db.update_tournament_bracket(tournament['id'], bracket)
                except Exception as e:
                    logger.error(f"Error updating bracket: {e}")
                    
                await self.show_current_round(query, context)
        else:
            await self.show_current_round(query, context)
        
        await query.answer("‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    def determine_tournament_winners(self, tournament):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–µ—Ä–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏"""
        bracket = tournament.get('bracket', {})
        format_type = tournament.get('format', '1v1')
        
        winners_data = []
        
        # –ù–∞–π–¥–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥
        final_round_key = None
        max_round = 0
        for round_key in bracket.keys():
            if round_key.startswith('round_'):
                try:
                    round_num = int(round_key.split('_')[1])
                    if round_num > max_round:
                        max_round = round_num
                        final_round_key = round_key
                except (ValueError, IndexError):
                    continue
        
        if not final_round_key or final_round_key not in bracket:
            return winners_data
        
        final_matches = bracket[final_round_key]
        
        # 1 –º–µ—Å—Ç–æ - –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Ñ–∏–Ω–∞–ª–∞
        for match in final_matches:
            if match.get('winner') is not None:
                winners_data.append({
                    'place': 1,
                    'team': match['winner']
                })
                
                # 2 –º–µ—Å—Ç–æ - –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –≤ —Ñ–∏–Ω–∞–ª–µ
                if match['winner'] == match.get('team1', []):
                    second_place = match.get('team2', [])
                else:
                    second_place = match.get('team1', [])
                
                winners_data.append({
                    'place': 2,
                    'team': second_place
                })
                break
        
        # 3 –º–µ—Å—Ç–æ - –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ –≤ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if max_round > 1:
            semifinal_round_key = f"round_{max_round - 1}"
            if semifinal_round_key in bracket:
                semifinal_matches = bracket[semifinal_round_key]
                
                # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –≤ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª–µ
                semifinal_losers = []
                for match in semifinal_matches:
                    if match.get('winner') is not None:
                        if match['winner'] == match.get('team1', []):
                            semifinal_losers.append(match.get('team2', []))
                        else:
                            semifinal_losers.append(match.get('team1', []))
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –∫–∞–∫ 3 –º–µ—Å—Ç–æ
                if semifinal_losers:
                    winners_data.append({
                        'place': 3,
                        'team': semifinal_losers[0]
                    })
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—É—Ñ–∏–Ω–∞–ª–∞, 3 –º–µ—Å—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º
        if len(winners_data) < 3 and max_round == 1:
            # –ò—â–µ–º –ª—é–±–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –≤–æ—à–µ–ª –≤ —Ñ–∏–Ω–∞–ª
            all_participants = tournament.get('participants', [])
            finalists = []
            for match in final_matches:
                finalists.extend(match.get('team1', []))
                finalists.extend(match.get('team2', []))
            
            for participant in all_participants:
                if participant not in finalists:
                    if format_type == '1v1':
                        winners_data.append({
                            'place': 3,
                            'team': [participant]
                        })
                        break
        
        return winners_data

    async def finish_tournament(self, query, context):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø—Ä–∏–∑–µ—Ä–æ–≤"""
        chat_id = query.message.chat_id
        tournament = active_tournaments.get(chat_id, {})
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
        winners_data = self.determine_tournament_winners(tournament)
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        winners_text = ""
        for i, winner_data in enumerate(winners_data[:3]):
            place = i + 1
            team = winner_data.get('team', [])
            
            # –ù–∞—á–∏—Å–ª—è–µ–º XP –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã/–∏–≥—Ä–æ–∫—É
            xp_rewards = {1: 100, 2: 75, 3: 50}
            xp = xp_rewards.get(place, 0)
            
            for user_id in team:
                try:
                    self.db.add_tournament_win(user_id, place)
                except Exception as e:
                    logger.error(f"Error adding win for user {user_id}: {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            team_names = await self.get_team_names(team, context, chat_id)
            
            if place == 1:
                winners_text += f"ü•á 1 –º–µ—Å—Ç–æ ‚Äî {team_names} (+{xp} XP)\n"
            elif place == 2:
                winners_text += f"ü•à 2 –º–µ—Å—Ç–æ ‚Äî {team_names} (+{xp} XP)\n"
            elif place == 3:
                winners_text += f"ü•â 3 –º–µ—Å—Ç–æ ‚Äî {team_names} (+{xp} XP)\n"
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            if tournament.get('id'):
                self.db.finish_tournament(tournament['id'])
        except Exception as e:
            logger.error(f"Error finishing tournament: {e}")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π
        bracket = tournament.get('bracket', {})
        for round_key in bracket.keys():
            if round_key.startswith('round_'):
                for match in bracket[round_key]:
                    match_id = match.get('match_id', 0)
                    if match_id in match_scores:
                        del match_scores[match_id]
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ –æ—á–∏—â–∞–µ–º —Ç—Ä–µ–∫–µ—Ä —É—á–∞—Å—Ç–∏—è
        if chat_id in active_tournaments:
            del active_tournaments[chat_id]
        if chat_id in user_participation_tracker:
            del user_participation_tracker[chat_id]
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
        keyboard = [[InlineKeyboardButton("üìÜ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç—É—Ä–Ω–∏—Ä", callback_data="schedule_next_tournament")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        format_name = TOURNAMENT_FORMATS.get(tournament.get('format', '1v1'), tournament.get('format', '1v1'))
        final_message = f"""üèÅ –¢—É—Ä–Ω–∏—Ä {format_name} –∑–∞–≤–µ—Ä—à—ë–Ω!

{winners_text}

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!
üéÆ –°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –∑–∞ —É—á–∞—Å—Ç–∏–µ!

XP –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤"""
        
        await query.edit_message_text(
            final_message,
            reply_markup=reply_markup
        )

    async def top_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤"""
        keyboard = [
            [
                InlineKeyboardButton("üèÖ –¢–æ–ø –ø–æ –∫—É–±–∫–∞–º", callback_data="top_trophies"),
                InlineKeyboardButton("üìö –¢–æ–ø –ø–æ –æ–ø—ã—Ç—É", callback_data="top_experience")
            ],
            [
                InlineKeyboardButton("üèÜ –¢–æ–ø –ø–æ –ø–æ–±–µ–¥–∞–º", callback_data="top_wins"),
                InlineKeyboardButton("üéÆ –¢–æ–ø –ø–æ —É—á–∞—Å—Ç–∏—è–º", callback_data="top_participations")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìä –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:",
            reply_markup=reply_markup
        )

    async def show_top_trophies(self, query, context):
        """–ü–æ–∫–∞–∑ —Ç–æ–ø–∞ –ø–æ –∫—É–±–∫–∞–º"""
        try:
            if hasattr(self.db, 'get_top_users_by_trophies'):
                top_users = self.db.get_top_users_by_trophies(10)
            else:
                # Fallback –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                top_users = []
                logger.warning("Method get_top_users_by_trophies not found in database")
        except Exception as e:
            logger.error(f"Error getting top trophies: {e}")
            top_users = []
        
        if not top_users:
            await query.edit_message_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø–∞!")
            return
        
        top_text = "üèÖ –¢–æ–ø –ø–æ –∫—É–±–∫–∞–º:\n\n"
        
        for i, user_data in enumerate(top_users, 1):
            username = user_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            trophies = user_data.get('trophies', 0)
            
            if i == 1:
                emoji = "ü•á"
            elif i == 2:
                emoji = "ü•à"
            elif i == 3:
                emoji = "ü•â"
            else:
                emoji = f"{i}."
            
            if username != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π':
                top_text += f"{emoji} @{username} ‚Äî {trophies:,} üèÖ\n"
            else:
                top_text += f"{emoji} {username} ‚Äî {trophies:,} üèÖ\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–ø—É", callback_data="back_to_top")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(top_text, reply_markup=reply_markup)

    async def show_top_experience(self, query, context):
        """–ü–æ–∫–∞–∑ —Ç–æ–ø–∞ –ø–æ –æ–ø—ã—Ç—É"""
        try:
            if hasattr(self.db, 'get_top_users_by_experience'):
                top_users = self.db.get_top_users_by_experience(10)
            else:
                # Fallback –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                top_users = []
                logger.warning("Method get_top_users_by_experience not found in database")
        except Exception as e:
            logger.error(f"Error getting top experience: {e}")
            top_users = []
        
        if not top_users:
            await query.edit_message_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø–∞!")
            return
        
        top_text = "üìö –¢–æ–ø –ø–æ –æ–ø—ã—Ç—É:\n\n"
        
        for i, user_data in enumerate(top_users, 1):
            username = user_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            xp = user_data.get('xp', 0)
            rank = user_data.get('rank', get_top_users_by_experience(xp))
            
            if i == 1:
                emoji = "ü•á"
            elif i == 2:
                emoji = "ü•à"  
            elif i == 3:
                emoji = "ü•â"
            else:
                emoji = f"{i}."
            
            if username != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π':
                top_text += f"{emoji} @{username} ‚Äî {xp} XP ({rank})\n"
            else:
                top_text += f"{emoji} {username} ‚Äî {xp} XP ({rank})\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–ø—É", callback_data="back_to_top")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(top_text, reply_markup=reply_markup)

    async def show_top_wins(self, query, context):
        """–ü–æ–∫–∞–∑ —Ç–æ–ø–∞ –ø–æ –ø–æ–±–µ–¥–∞–º"""
        try:
            if hasattr(self.db, 'get_top_users_by_wins'):
                top_users = self.db.get_top_users_by_wins(10)
            else:
                # Fallback –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                top_users = []
                logger.warning("Method get_top_users_by_wins not found in database")
        except Exception as e:
            logger.error(f"Error getting top wins: {e}")
            top_users = []
        
        if not top_users:
            await query.edit_message_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø–∞!")
            return
        
        top_text = "üèÜ –¢–æ–ø –ø–æ –ø–æ–±–µ–¥–∞–º:\n\n"
        
        for i, user_data in enumerate(top_users, 1):
            username = user_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            wins = user_data.get('wins', 0)
            win_rate = user_data.get('win_rate', 0)
            
            if i == 1:
                emoji = "ü•á"
            elif i == 2:
                emoji = "ü•à"
            elif i == 3:
                emoji = "ü•â"
            else:
                emoji = f"{i}."
            
            if username != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π':
                top_text += f"{emoji} @{username} ‚Äî {wins} –ø–æ–±–µ–¥ ({win_rate}%)\n"
            else:
                top_text += f"{emoji} {username} ‚Äî {wins} –ø–æ–±–µ–¥ ({win_rate}%)\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–ø—É", callback_data="back_to_top")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(top_text, reply_markup=reply_markup)

    async def show_top_participations(self, query, context):
        """–ü–æ–∫–∞–∑ —Ç–æ–ø–∞ –ø–æ —É—á–∞—Å—Ç–∏—è–º"""
        try:
            if hasattr(self.db, 'get_top_users_by_participations'):
                top_users = self.db.get_top_users_by_participations(10)
            else:
                # Fallback –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                top_users = []
                logger.warning("Method get_top_users_by_participations not found in database")
        except Exception as e:
            logger.error(f"Error getting top participations: {e}")
            top_users = []
        
        if not top_users:
            await query.edit_message_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø–∞!")
            return
        
        top_text = "üéÆ –¢–æ–ø –ø–æ —É—á–∞—Å—Ç–∏—è–º:\n\n"
        
        for i, user_data in enumerate(top_users, 1):
            username = user_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            participations = user_data.get('participations', 0)
            wins = user_data.get('wins', 0)
            
            if i == 1:
                emoji = "ü•á"
            elif i == 2:
                emoji = "ü•à"
            elif i == 3:
                emoji = "ü•â"
            else:
                emoji = f"{i}."
            
            if username != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π':
                top_text += f"{emoji} @{username} ‚Äî {participations} —É—á–∞—Å—Ç–∏–π ({wins} –ø–æ–±–µ–¥)\n"
            else:
                top_text += f"{emoji} {username} ‚Äî {participations} —É—á–∞—Å—Ç–∏–π ({wins} –ø–æ–±–µ–¥)\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–ø—É", callback_data="back_to_top")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(top_text, reply_markup=reply_markup)

    async def show_top_callback(self, query, context):
        """–ü–æ–∫–∞–∑ —Ç–æ–ø–∞ —á–µ—Ä–µ–∑ callback"""
        keyboard = [
            [
                InlineKeyboardButton("üèÖ –¢–æ–ø –ø–æ –∫—É–±–∫–∞–º", callback_data="top_trophies"),
                InlineKeyboardButton("üìö –¢–æ–ø –ø–æ –æ–ø—ã—Ç—É", callback_data="top_experience")
            ],
            [
                InlineKeyboardButton("üèÜ –¢–æ–ø –ø–æ –ø–æ–±–µ–¥–∞–º", callback_data="top_wins"),
                InlineKeyboardButton("üéÆ –¢–æ–ø –ø–æ —É—á–∞—Å—Ç–∏—è–º", callback_data="top_participations")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìä –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:",
            reply_markup=reply_markup
        )

    async def schedule_tournament(self, query, context):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
        chat_id = query.message.chat_id
        
        # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        tomorrow = datetime.now() + timedelta(hours=SCHEDULED_TOURNAMENT_HOURS)
        poll_question = f"üïò –°–º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è –≤ 22:00 (–ø–æ –ö–∏–µ–≤—É)?"
        
        try:
            poll = await context.bot.send_poll(
                chat_id=chat_id,
                question=poll_question,
                options=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"],
                is_anonymous=False,
                allows_multiple_answers=False
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
            schedule_id = self.db.add_scheduled_tournament(
                chat_id=chat_id,
                poll_message_id=poll.message_id,
                scheduled_time=tomorrow.isoformat()
            )
            
            active_polls[poll.poll.id] = {
                'schedule_id': schedule_id,
                'chat_id': chat_id,
                'participants': []
            }
            
            await query.edit_message_text("üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")
        except Exception as e:
            logger.error(f"Error creating poll: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!")
    
    async def poll_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"""
        poll_answer = update.poll_answer
        poll_id = poll_answer.poll_id
        user_id = poll_answer.user.id
        
        if poll_id in active_polls:
            poll_data = active_polls[poll_id]
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–î–∞" (option_ids[0] == 0)
            if 0 in poll_answer.option_ids:
                if user_id not in poll_data['participants']:
                    poll_data['participants'].append(user_id)
                    try:
                        self.db.update_scheduled_participants(
                            poll_data['schedule_id'], 
                            poll_data['participants']
                        )
                    except Exception as e:
                        logger.error(f"Error updating scheduled participants: {e}")
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ù–µ—Ç" –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª –æ—Ç–≤–µ—Ç
                if user_id in poll_data['participants']:
                    poll_data['participants'].remove(user_id)
                    try:
                        self.db.update_scheduled_participants(
                            poll_data['schedule_id'], 
                            poll_data['participants']
                        )
                    except Exception as e:
                        logger.error(f"Error updating scheduled participants: {e}")
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –∫–ª—É–±–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        try:
            self.db.add_user(user_id, update.effective_user.username, update.effective_user.first_name)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            user = self.db.get_user(user_id)
            if not user or not user.get('clan') or user.get('clan') == '–ù–µ —É–∫–∞–∑–∞–Ω':
                self.db.update_user_clan(user_id, 'FairDragons')
        except Exception as e:
            logger.error(f"Error setting up user profile: {e}")
        
        try:
            stats = self.db.get_user_stats(user_id) if hasattr(self.db, 'get_user_stats') else {}
            user = self.db.get_user(user_id) if hasattr(self.db, 'get_user') else {}
        except Exception as e:
            logger.error(f"Error getting user data: {e}")
            stats = {}
            user = {}
        
        if not user:
            await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Owner
        role_names = {
            'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
            'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'owner': '–í–ª–∞–¥–µ–ª–µ—Ü'
        }
        
        # –û—Å–æ–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Owner –ø–æ ID
        if user_id == OWNER_ID:
            role_display = '–í–ª–∞–¥–µ–ª–µ—Ü'
        else:
            role_display = role_names.get(user.get('role', 'user'), '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        trophies = stats.get('trophies', 0)
        clan = stats.get('clan', user.get('clan', 'FairDragons'))
        xp = stats.get('xp', 0)
        rank = stats.get('rank', get_rank_by_xp(xp))
        wins = stats.get('wins', 0)
        participations = stats.get('participations', 0)
        win_rate = stats.get('win_rate', 0 if participations == 0 else round((wins / participations) * 100, 1))
        
        profile_text = f"""üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞

üßë –ù–∏–∫–Ω–µ–π–º: @{username if update.effective_user.username else username}
üèÜ –ö—É–±–∫–∏: {trophies:,} üèÖ
üî∞ –†–æ–ª—å: {role_display}
üè¥ –ö–ª–∞–Ω: {clan}
üìö –û–ø—ã—Ç: {xp} XP
üéñÔ∏è –†–∞–Ω–≥: {rank}

ü•á –ü–æ–±–µ–¥: {wins}
üéÆ –£—á–∞—Å—Ç–∏–π: {participations}
üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate}%

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /setcups [—á–∏—Å–ª–æ] - –∏–∑–º–µ–Ω–∏—Ç—å –∫—É–±–∫–∏
‚Ä¢ /setclan [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞–Ω"""
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
        if update.effective_chat.type == 'private':
            keyboard = [
                [
                    InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞–Ω", callback_data="edit_clan"),
                    InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫—É–±–∫–∏", callback_data="edit_trophies")
                ],
                [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ —Ä–∞–Ω–≥–µ", callback_data="change_rank")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(profile_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(profile_text)
    
    async def setcups_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É–±–∫–æ–≤"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∫–æ–≤!\n–ü—Ä–∏–º–µ—Ä: /setcups 25000")
            return
        
        try:
            trophies = int(context.args[0])
            if trophies < 0:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!")
                return
            
            user_id = update.effective_user.id
            
            try:
                self.db.add_user(user_id, update.effective_user.username, update.effective_user.first_name)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                user = self.db.get_user(user_id)
                if not user or not user.get('clan') or user.get('clan') == '–ù–µ —É–∫–∞–∑–∞–Ω':
                    self.db.update_user_clan(user_id, 'FairDragons')
                
                if self.db.update_user_trophies(user_id, trophies):
                    await update.message.reply_text(f"‚úÖ –ö—É–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {trophies:,} üèÖ")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É–±–∫–æ–≤!")
            except Exception as e:
                logger.error(f"Error updating trophies: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É–±–∫–æ–≤!")
        
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞!")
    
    async def setclan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∞–Ω–∞"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞!\n–ü—Ä–∏–º–µ—Ä: /setclan BRAWL STARS")
            return
        
        clan_name = " ".join(context.args)
        
        if len(clan_name) > 50:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        user_id = update.effective_user.id
        
        try:
            self.db.add_user(user_id, update.effective_user.username, update.effective_user.first_name)
            
            if self.db.update_user_clan(user_id, clan_name):
                await update.message.reply_text(f"‚úÖ –ö–ª–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω: {clan_name} üëë")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–Ω–∞!")
        except Exception as e:
            logger.error(f"Error updating clan: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–Ω–∞!")
    
    async def ranks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–Ω–≥–∞—Ö"""
        ranks_text = """üéñÔ∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤ Brawl Stars Tournament Bot

–†–∞–Ω–≥–∏ –æ—Ç—Ä–∞–∂–∞—é—Ç –≤–∞—à –æ–ø—ã—Ç –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö. –û–Ω–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ XP (–æ–ø—ã—Ç–∞), –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–∞ —É—á–∞—Å—Ç–∏–µ –∏ –ø–æ–±–µ–¥—ã.

üìä –¢–∞–±–ª–∏—Ü–∞ —Ä–∞–Ω–≥–æ–≤:

üôã –ù–æ–≤–∏—á–æ–∫ ‚Äî 0-49 XP
‚Ä¢ –¢–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
‚Ä¢ –ò–∑—É—á–∞–µ—Ç–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–≥—Ä—ã
‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏

ü•â –õ—é–±–∏—Ç–µ–ª—å ‚Äî 50-199 XP  
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
‚Ä¢ –ü–æ–Ω–∏–º–∞–µ—Ç–µ –æ—Å–Ω–æ–≤—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
‚Ä¢ –ù–∞—á–∏–Ω–∞–µ—Ç–µ –ø–æ–±–µ–∂–¥–∞—Ç—å

üéñÔ∏è –≠–∫—Å–ø–µ—Ä—Ç ‚Äî 200-499 XP
‚Ä¢ –û–ø—ã—Ç–Ω—ã–π –∏–≥—Ä–æ–∫ —Å —Ö–æ—Ä–æ—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
‚Ä¢ –ó–Ω–∞–µ—Ç–µ —Ç–∞–∫—Ç–∏–∫–∏ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ –∏–≥—Ä—ã
‚Ä¢ –£–º–µ–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ

üèÜ –ú–∞—Å—Ç–µ—Ä ‚Äî 500-999 XP
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã
‚Ä¢ –ú–æ–∂–µ—Ç–µ –æ–±—É—á–∞—Ç—å –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ –≤—ã—Å–æ–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

üëë –õ–µ–≥–µ–Ω–¥–∞ ‚Äî 1000+ XP
‚Ä¢ –≠–ª–∏—Ç–Ω—ã–π –∏–≥—Ä–æ–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
‚Ä¢ –û–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö –±–æ–π—Ü–æ–≤
‚Ä¢ –ü—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–¥—Ä–∞–∂–∞–Ω–∏—è

üí∞ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å XP:
‚Ä¢ ü•á 1 –º–µ—Å—Ç–æ: +100 XP + –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ ü•à 2 –º–µ—Å—Ç–æ: +75 XP
‚Ä¢ ü•â 3 –º–µ—Å—Ç–æ: +50 XP
‚Ä¢ üéÆ –£—á–∞—Å—Ç–∏–µ: –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üéØ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤—ã—Å–æ–∫–∏—Ö —Ä–∞–Ω–≥–æ–≤:
‚Ä¢ –ü—Ä–µ—Å—Ç–∏–∂ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
‚Ä¢ –£–≤–∞–∂–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–æ–º –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤

–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö, –ø–æ–±–µ–∂–¥–∞–π—Ç–µ –∏ –ø–æ–≤—ã—à–∞–π—Ç–µ —Å–≤–æ–π —Ä–∞–Ω–≥! –ö–∞–∂–¥–∞—è –∏–≥—Ä–∞ –¥–µ–ª–∞–µ—Ç –≤–∞—Å —Å–∏–ª—å–Ω–µ–µ! üí™"""
        
        await update.message.reply_text(ranks_text)
    
    async def giverole_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å ID –∏–∑ OWNER_ID)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏–º–µ–Ω–Ω–æ –≤–ª–∞–¥–µ–ª–µ—Ü
        if update.effective_user.id != OWNER_ID:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Ä–æ–ª–∏!")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /giverole @username —Ä–æ–ª—å\n"
                "–∏–ª–∏: /giverole 123456789 —Ä–æ–ª—å\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: admin, moderator, user"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–æ–ª—å
        user_identifier = context.args[0]
        role = context.args[1].lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–æ–ª–∏
        if role not in ['admin', 'moderator', 'user']:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å! –î–æ—Å—Ç—É–ø–Ω—ã: admin, moderator, user")
            return
        
        target_user_id = None
        target_username = None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ username –∏–ª–∏ user_id
        if user_identifier.startswith('@'):
            # –≠—Ç–æ username
            target_username = user_identifier[1:]  # —É–±–∏—Ä–∞–µ–º @
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ get_user_by_username
            try:
                if hasattr(self.db, 'get_user_by_username'):
                    target_user = self.db.get_user_by_username(target_username)
                    if target_user:
                        target_user_id = target_user['user_id']
                    else:
                        await update.message.reply_text(
                            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n"
                            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å /start –±–æ—Ç—É."
                        )
                        return
                else:
                    await update.message.reply_text(
                        "‚ùå –ü–æ–∏—Å–∫ –ø–æ username –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ @username"
                    )
                    return
            except Exception as e:
                logger.error(f"Error finding user by username: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                return
        else:
            # –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å user_id
            try:
                target_user_id = int(user_identifier)
                target_user = self.db.get_user(target_user_id)
                if not target_user:
                    await update.message.reply_text(
                        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n"
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å /start –±–æ—Ç—É."
                    )
                    return
                target_username = target_user.get('username', str(target_user_id))
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                return
            except Exception as e:
                logger.error(f"Error getting user: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                return
        
        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if target_user_id == OWNER_ID:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            if self.db.update_user_role(target_user_id, role):
                role_names = {
                    'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', 
                    'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
                }
                role_display = role_names.get(role, role)
                
                if target_username.isdigit():
                    await update.message.reply_text(
                        f"‚úÖ –†–æ–ª—å \"{role_display}\" –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {target_username}"
                    )
                else:
                    await update.message.reply_text(
                        f"‚úÖ –†–æ–ª—å \"{role_display}\" –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_username}"
                    )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏!")
        except Exception as e:
            logger.error(f"Error updating user role: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏!")
    
    async def help_win_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ –ø–æ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤"""
        user_id = update.effective_user.id
        
        try:
            user = self.db.get_user(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∏ –≤—ã—à–µ)
            if not user or user.get('role') not in ['moderator', 'admin', 'owner'] and user_id != OWNER_ID:
                await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
                return
        except Exception as e:
            logger.error(f"Error checking user permissions: {e}")
            if user_id != OWNER_ID:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
                return
        
        help_text = """üë®‚Äç‚öñÔ∏è –ü–æ–º–æ—â—å –ø–æ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:

1. –°–ª–µ–¥–∏ –∑–∞ –º–∞—Ç—á–µ–º –∏ –æ–ø—Ä–µ–¥–µ–ª—è–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é

2. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É "üèÜ –ö–æ–º–∞–Ω–¥–∞ X" —Ä—è–¥–æ–º —Å –º–∞—Ç—á–µ–º –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É:
   /winner [–Ω–æ–º–µ—Ä_–º–∞—Ç—á–∞] [1 –∏–ª–∏ 2]

3. –ü–æ—Å–ª–µ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥ –±–æ—Ç –ø–µ—Ä–µ–π–¥—ë—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É

üìù –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:
‚Ä¢ /winner 1 1 - –ø–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ 1 –≤ –º–∞—Ç—á–µ ‚Ññ1
‚Ä¢ /winner 2 2 - –ø–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ 2 –≤ –º–∞—Ç—á–µ ‚Ññ2

üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /matches - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏
‚Ä¢ /bracket - –ø–æ–∫–∞–∑–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É

‚ö†Ô∏è –í–∞–∂–Ω–æ: –í —Ç—É—Ä–Ω–∏—Ä–∞—Ö –¥–æ 2-3 –ø–æ–±–µ–¥ –º–∞—Ç—á –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–±–µ–¥—ã, –∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥!"""
        
        await update.message.reply_text(help_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = """ü§ñ Brawl Stars Tournament Bot

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /profile - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
‚Ä¢ /setcups [—á–∏—Å–ª–æ] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∫–æ–≤
‚Ä¢ /setclan [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–Ω
‚Ä¢ /top - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–∞–∑–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ /ranks - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ —Ä–∞–Ω–≥–æ–≤
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ /stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–î–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
‚Ä¢ /winner [–º–∞—Ç—á] [1|2] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
‚Ä¢ /matches - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏
‚Ä¢ /bracket - –ü–æ–∫–∞–∑–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É
‚Ä¢ /help_win - –ü–æ–º–æ—â—å –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π

–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
‚Ä¢ /giverole @user —Ä–æ–ª—å - –í—ã–¥–∞—Ç—å —Ä–æ–ª—å (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)

–°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π:
‚Ä¢ üëë Owner - –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –±–æ—Ç–æ–º
‚Ä¢ üõ° Admin - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏  
‚Ä¢ üßπ Moderator - –º–æ–¥–µ—Ä–∞—Ü–∏—è –±–æ–µ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
‚Ä¢ üôã User - —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö

–ö–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä:
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
2. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞  
3. –ù–∞–∂–º–∏—Ç–µ "üéÆ –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä"
4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)
5. –î–æ–∂–¥–∏—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∏–Ω–∏–º—É–º –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞)
6. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)
7. –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –º–∞—Ç—á–µ–π

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–∞—Ä—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
‚Ä¢ –ß–µ—Å—Ç–Ω–∞—è —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —Å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ–º
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ–ø—ã—Ç–∞ –∏ —Ä–∞–Ω–≥–æ–≤
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∞—Ç—á–µ–π –¥–æ 2-3 –ø–æ–±–µ–¥ (Best of N)
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤

–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —á–µ—Å—Ç–Ω—ã—Ö –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤! –£–¥–∞—á–∏ –≤ –±–æ—è—Ö! ‚öîÔ∏è"""
        
        await update.message.reply_text(help_text)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            total_users = self.db.get_total_users() if hasattr(self.db, 'get_total_users') else 0
            total_tournaments = self.db.get_total_tournaments() if hasattr(self.db, 'get_total_tournaments') else 0
            total_finished = self.db.get_finished_tournaments() if hasattr(self.db, 'get_finished_tournaments') else 0
        except Exception as e:
            logger.error(f"Error getting stats: {e}")
            total_users = 0
            total_tournaments = 0
            total_finished = 0
        
        stats_text = f"""üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üéÆ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: {len(active_tournaments)}
üèÜ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {total_tournaments}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {total_finished}
üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: {len(active_polls)}

–ú–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞:
‚Ä¢ 1v1: {MIN_TOURNAMENT_PARTICIPANTS.get('1v1', 2)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ 2v2: {MIN_TOURNAMENT_PARTICIPANTS.get('2v2', 4)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤  
‚Ä¢ 3v3: {MIN_TOURNAMENT_PARTICIPANTS.get('3v3', 6)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!"""
        
        await update.message.reply_text(stats_text)
    
    async def show_profile_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ callback"""
        user_id = query.from_user.id
        username = query.from_user.username or query.from_user.first_name
        
        try:
            self.db.add_user(user_id, query.from_user.username, query.from_user.first_name)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            user = self.db.get_user(user_id)
            if not user or not user.get('clan') or user.get('clan') == '–ù–µ —É–∫–∞–∑–∞–Ω':
                self.db.update_user_clan(user_id, 'FairDragons')
        except Exception as e:
            logger.error(f"Error setting up user: {e}")
        
        try:
            stats = self.db.get_user_stats(user_id) if hasattr(self.db, 'get_user_stats') else {}
            user = self.db.get_user(user_id) if hasattr(self.db, 'get_user') else {}
        except Exception as e:
            logger.error(f"Error getting user data: {e}")
            stats = {}
            user = {}
        
        if not user:
            await query.edit_message_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Owner
        role_names = {
            'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
            'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'owner': '–í–ª–∞–¥–µ–ª–µ—Ü'
        }
        
        # –û—Å–æ–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Owner –ø–æ ID
        if user_id == OWNER_ID:
            role_display = '–í–ª–∞–¥–µ–ª–µ—Ü'
        else:
            role_display = role_names.get(user.get('role', 'user'), '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        trophies = stats.get('trophies', 0)
        clan = stats.get('clan', user.get('clan', 'FairDragons'))
        xp = stats.get('xp', 0)
        rank = stats.get('rank', get_rank_by_xp(xp))
        wins = stats.get('wins', 0)
        participations = stats.get('participations', 0)
        win_rate = stats.get('win_rate', 0 if participations == 0 else round((wins / participations) * 100, 1))
        
        profile_text = f"""üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞

üßë –ù–∏–∫–Ω–µ–π–º: @{username if query.from_user.username else username}
üèÜ –ö—É–±–∫–∏: {trophies:,} üèÖ
üî∞ –†–æ–ª—å: {role_display}
üè¥ –ö–ª–∞–Ω: {clan}
üìö –û–ø—ã—Ç: {xp} XP
üéñÔ∏è –†–∞–Ω–≥: {rank}

ü•á –ü–æ–±–µ–¥: {wins}
üéÆ –£—á–∞—Å—Ç–∏–π: {participations}
üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate}%"""
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º
        keyboard = [
            [
                InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞–Ω", callback_data="edit_clan"),
                InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫—É–±–∫–∏", callback_data="edit_trophies")
            ],
            [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ —Ä–∞–Ω–≥–µ", callback_data="change_rank")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(profile_text, reply_markup=reply_markup)
    
    async def edit_clan_prompt(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–Ω–∞"""
        await query.edit_message_text(
            "üëë –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–Ω–∞\n\n"
            "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/setclan [–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–ª–∞–Ω–∞]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /setclan BRAWL STARS\n\n"
            "üè¥ –¢–µ–∫—É—â–∏–π –∫–ª–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: FairDragons\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ—ë",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="show_profile")]
            ])
        )
    
    async def edit_trophies_prompt(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É–±–∫–æ–≤"""
        await query.edit_message_text(
            "üèÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É–±–∫–æ–≤\n\n"
            "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/setcups [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /setcups 25000\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ—ë",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="show_profile")]
            ])
        )
    
    async def show_ranks_info(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–Ω–≥–∞—Ö"""
        ranks_text = """üéñÔ∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤

–†–∞–Ω–≥–∏ –≤ –±–æ—Ç–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø—ã—Ç–∞ (XP), –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–∞ —É—á–∞—Å—Ç–∏–µ –∏ –ø–æ–±–µ–¥—ã –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö.

–¢–∞–±–ª–∏—Ü–∞ —Ä–∞–Ω–≥–æ–≤:

üôã –ù–æ–≤–∏—á–æ–∫ ‚Äî 0-49 XP
‚Ä¢ –¢–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å–≤–æ–π –ø—É—Ç—å
‚Ä¢ –ò–∑—É—á–∞–µ—Ç–µ –∏–≥—Ä—É –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

ü•â –õ—é–±–∏—Ç–µ–ª—å ‚Äî 50-199 XP  
‚Ä¢ –£—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö —Ä–µ–≥—É–ª—è—Ä–Ω–æ
‚Ä¢ –ü–æ–Ω–∏–º–∞–µ—Ç–µ –æ—Å–Ω–æ–≤—ã –∏–≥—Ä—ã

üéñÔ∏è –≠–∫—Å–ø–µ—Ä—Ç ‚Äî 200-499 XP
‚Ä¢ –û–ø—ã—Ç–Ω—ã–π –∏–≥—Ä–æ–∫
‚Ä¢ –ó–Ω–∞–µ—Ç–µ —Ç–∞–∫—Ç–∏–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤

üèÜ –ú–∞—Å—Ç–µ—Ä ‚Äî 500-999 XP
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã
‚Ä¢ –ú–æ–∂–µ—Ç–µ –æ–±—É—á–∞—Ç—å –Ω–æ–≤–∏—á–∫–æ–≤

üëë –õ–µ–≥–µ–Ω–¥–∞ ‚Äî 1000+ XP
‚Ä¢ –≠–ª–∏—Ç–Ω—ã–π –∏–≥—Ä–æ–∫
‚Ä¢ –û–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ

–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å XP:
‚Ä¢ ü•á 1 –º–µ—Å—Ç–æ: +100 XP
‚Ä¢ ü•à 2 –º–µ—Å—Ç–æ: +75 XP  
‚Ä¢ ü•â 3 –º–µ—Å—Ç–æ: +50 XP

–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –∏ –ø–æ–≤—ã—à–∞–π—Ç–µ —Å–≤–æ–π —Ä–∞–Ω–≥!"""
        
        await query.edit_message_text(
            ranks_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="show_profile")]
            ])
        )
    
    async def send_private_welcome_edit(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"""
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
        bot_username = context.bot.username
        add_to_group_url = f"https://t.me/{bot_username}?startgroup=true"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=add_to_group_url)],
            [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Brawl Stars Tournament Bot!

üëã –ü—Ä–∏–≤–µ—Ç, {query.from_user.first_name}! –Ø –ø–æ–º–æ–≥–∞—é –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –∫—Ä—É—Ç—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ Brawl Stars –ø—Ä—è–º–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö Telegram.

1. –ß—Ç–æ —è —É–º–µ—é:              

üéÆ –¢—É—Ä–Ω–∏—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ 1v1, 2v2, 3v3
   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–∞—Ä—Ç
   ‚Ä¢ –ß–µ—Å—Ç–Ω–∞—è —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞

üóì –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤
   ‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —É—á–∞—Å—Ç–∏–µ
   ‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö

üìä –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥ –∏ —É—á–∞—Å—Ç–∏–π
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ–ø—ã—Ç–∞ –∏ —Ä–∞–Ω–≥–æ–≤
   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—É–±–∫–æ–≤

üîê –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π
   ‚Ä¢ –†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç—É–ø–∞
   ‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤

2. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:          

‚Ä¢ /profile - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ /setcups [—á–∏—Å–ª–æ] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É–±–∫–∏
‚Ä¢ /help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /ranks - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–Ω–≥–∞—Ö

3. –ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?    

1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
2Ô∏è‚É£ –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üéÆ –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä"
4Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
5Ô∏è‚É£ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏–≥—Ä–æ–π!

–ì–æ—Ç–æ–≤ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º? –î–æ–±–∞–≤–ª—è–π—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É! üöÄ"""
        
        await query.edit_message_text(
            welcome_text,
            reply_markup=reply_markup
        )
    
    async def winner_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –º–∞—Ç—á–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        try:
            user = self.db.get_user(user_id)
            if not user or user.get('role') not in ['moderator', 'admin', 'owner'] and user_id != OWNER_ID:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!")
                return
        except Exception as e:
            logger.error(f"Error checking permissions: {e}")
            if user_id != OWNER_ID:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
                return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
        if chat_id not in active_tournaments:
            await update.message.reply_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞!")
            return
        
        tournament = active_tournaments[chat_id]
        bracket = tournament.get('bracket', {})
        current_round = bracket.get('current_round', 'round_1')
        
        if current_round == 'registration':
            await update.message.reply_text("‚ùå –¢—É—Ä–Ω–∏—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è!")
            return
        
        if not context.args or len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /winner [–Ω–æ–º–µ—Ä_–º–∞—Ç—á–∞] [1 –∏–ª–∏ 2]\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /winner 1 1 - –ø–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ 1 –≤ –º–∞—Ç—á–µ ‚Ññ1\n"
                "‚Ä¢ /winner 2 2 - –ø–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ 2 –≤ –º–∞—Ç—á–µ ‚Ññ2\n\n"
                "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏: /matches"
            )
            return
        
        try:
            match_number = int(context.args[0]) - 1  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–≤–æ–¥—è—Ç 1-based, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º 0-based
            team_number = int(context.args[1])
            
            if team_number not in [1, 2]:
                await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∏–ª–∏ 2!")
                return
            
            matches = bracket.get(current_round, [])
            
            if match_number < 0 or match_number >= len(matches):
                await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—Ç—á–∞! –î–æ—Å—Ç—É–ø–Ω—ã –º–∞—Ç—á–∏: 1-{len(matches)}")
                return
            
            match = matches[match_number]
            
            if match.get('winner') is not None:
                await update.message.reply_text("‚ùå –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!")
                return
            
            match_id = match.get('match_id', 0)
            wins_needed = tournament.get('wins_needed', 1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç
            if match_id not in match_scores:
                match_scores[match_id] = {'team1_wins': 0, 'team2_wins': 0}
            
            if team_number == 1:
                match_scores[match_id]['team1_wins'] += 1
                winner_team = match.get('team1', [])
            else:
                match_scores[match_id]['team2_wins'] += 1
                winner_team = match.get('team2', [])
            
            team1_wins = match_scores[match_id]['team1_wins']
            team2_wins = match_scores[match_id]['team2_wins']
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ä–∞—É–Ω–¥–∞
            winner_names = await self.get_team_names(winner_team, context, chat_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –∫—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥
            if team1_wins >= wins_needed:
                match['winner'] = match['team1']
                final_winner_names = await self.get_team_names(match['team1'], context, chat_id)
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –º–∞—Ç—á–∞: {final_winner_names}\n"
                    f"–ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: {team1_wins}:{team2_wins}\n\n"
                    f"üéñÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or update.effective_user.first_name}"
                )
            elif team2_wins >= wins_needed:
                match['winner'] = match['team2']
                final_winner_names = await self.get_team_names(match['team2'], context, chat_id)
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –º–∞—Ç—á–∞: {final_winner_names}\n"
                    f"–ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: {team1_wins}:{team2_wins}\n\n"
                    f"üéñÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or update.effective_user.first_name}"
                )
            else:
                # –ú–∞—Ç—á –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
                await update.message.reply_text(
                    f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–∞: {winner_names}\n"
                    f"–°—á—ë—Ç: {team1_wins}:{team2_wins}\n\n"
                    f"üéñÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or update.effective_user.first_name}"
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            try:
                if tournament.get('id'):
                    self.db.update_tournament_bracket(tournament['id'], bracket)
            except Exception as e:
                logger.error(f"Error updating bracket in DB: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ —Ä–∞—É–Ω–¥
            all_finished = all(m.get('winner') is not None for m in matches)
            
            if all_finished:
                # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
                winners = [match.get('winner', []) for match in matches if match.get('winner')]
                winners_flat = [player for team in winners for player in team]
                
                if len(winners) == 1:
                    # –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω
                    tournament['bracket']['winners'] = winners_flat
                    await self.finish_tournament_by_command(update, context)
                else:
                    # –°–æ–∑–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
                    await self.create_next_round(update, context, winners_flat)
        
        except ValueError:
            await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä–∞ –º–∞—Ç—á–∞ –∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")
        except Exception as e:
            logger.error(f"Error in winner command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã!")
    
    async def matches_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        try:
            user = self.db.get_user(user_id)
            if not user or user.get('role') not in ['moderator', 'admin', 'owner'] and user_id != OWNER_ID:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç—á–µ–π!")
                return
        except Exception as e:
            logger.error(f"Error checking permissions: {e}")
            if user_id != OWNER_ID:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
                return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
        if chat_id not in active_tournaments:
            await update.message.reply_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞!")
            return
        
        tournament = active_tournaments[chat_id]
        bracket = tournament.get('bracket', {})
        current_round = bracket.get('current_round', 'round_1')
        
        if current_round == 'registration':
            await update.message.reply_text("‚ùå –¢—É—Ä–Ω–∏—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è!")
            return
        
        matches = bracket.get(current_round, [])
        wins_needed = tournament.get('wins_needed', 1)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
        total_matches = len(matches)
        if total_matches == 1:
            round_name = "üèÜ –§–ò–ù–ê–õ"
        elif total_matches == 2:
            round_name = "üéØ –ü–û–õ–£–§–ò–ù–ê–õ"
        else:
            round_name = f"‚öîÔ∏è –†–∞—É–Ω–¥ {current_round.split('_')[1]}"
        
        matches_text = f"üìä {round_name}\n"
        matches_text += f"üéÆ –§–æ—Ä–º–∞—Ç: {TOURNAMENT_FORMATS.get(tournament.get('format', '1v1'), tournament.get('format', '1v1'))}\n"
        matches_text += f"üèÜ –î–æ {wins_needed} –ø–æ–±–µ–¥\n\n"
        
        active_matches = []
        finished_matches = []
        
        for i, match in enumerate(matches, 1):
            team1_names = await self.get_team_names(match.get('team1', []), context, chat_id)
            team2_names = await self.get_team_names(match.get('team2', []), context, chat_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—á—ë—Ç –º–∞—Ç—á–∞
            match_id = match.get('match_id', 0)
            score = match_scores.get(match_id, {'team1_wins': 0, 'team2_wins': 0})
            score_text = f"({score['team1_wins']}:{score['team2_wins']})"
            
            if match.get('winner') is None:
                match_text = f"–ú–∞—Ç—á #{i} ‚è≥ {score_text}\n"
                match_text += f"üü• –ö–æ–º–∞–Ω–¥–∞ 1: {team1_names}\n"
                match_text += f"üü¶ –ö–æ–º–∞–Ω–¥–∞ 2: {team2_names}\n"
                match_text += f"üí¨ /winner {i} 1 –∏–ª–∏ /winner {i} 2"
                active_matches.append(match_text)
            else:
                winner_names = await self.get_team_names(match.get('winner', []), context, chat_id)
                match_text = f"–ú–∞—Ç—á #{i} ‚úÖ {score_text}\n"
                match_text += f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_names}"
                finished_matches.append(match_text)
        
        if active_matches:
            matches_text += "‚è≥ –ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏:\n\n"
            matches_text += "\n\n".join(active_matches)
        
        if finished_matches:
            matches_text += "\n\n" if active_matches else ""
            matches_text += "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏:\n\n"
            matches_text += "\n\n".join(finished_matches)
        
        if not active_matches and not finished_matches:
            matches_text += "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π."
        
        await update.message.reply_text(matches_text)
    
    async def bracket_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏"""
        chat_id = update.effective_chat.id
        
        if chat_id not in active_tournaments:
            await update.message.reply_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞!")
            return
        
        tournament = active_tournaments[chat_id]
        bracket = tournament.get('bracket', {})
        current_round = bracket.get('current_round', 'round_1')
        
        if current_round == 'registration':
            await update.message.reply_text("‚ùå –¢—É—Ä–Ω–∏—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è!")
            return
        
        format_name = TOURNAMENT_FORMATS.get(tournament.get('format', '1v1'), tournament.get('format', '1v1'))
        wins_needed = tournament.get('wins_needed', 1)
        bracket_text = f"üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ {format_name}\n"
        bracket_text += f"üéØ –î–æ {wins_needed} –ø–æ–±–µ–¥\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞—É–Ω–¥—ã
        for round_key in sorted(bracket.keys()):
            if round_key.startswith('round_'):
                try:
                    round_num = int(round_key.split('_')[1])
                    round_matches = bracket[round_key]
                    
                    if len(round_matches) == 1:
                        round_title = "üèÜ –§–ò–ù–ê–õ"
                    elif len(round_matches) == 2:
                        round_title = "üéØ –ü–û–õ–£–§–ò–ù–ê–õ"
                    else:
                        round_title = f"‚öîÔ∏è –†–∞—É–Ω–¥ {round_num}"
                    
                    bracket_text += f"{round_title}:\n"
                    
                    for i, match in enumerate(round_matches, 1):
                        team1_names = await self.get_team_names(match.get('team1', []), context, chat_id)
                        team2_names = await self.get_team_names(match.get('team2', []), context, chat_id)
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å—á—ë—Ç –º–∞—Ç—á–∞
                        match_id = match.get('match_id', 0)
                        score = match_scores.get(match_id, {'team1_wins': 0, 'team2_wins': 0})
                        score_text = f"({score['team1_wins']}:{score['team2_wins']})"
                        
                        if match.get('winner') is None:
                            if round_key == current_round:
                                bracket_text += f"üî¥ {team1_names} üÜö {team2_names} {score_text} ‚è≥\n"
                            else:
                                bracket_text += f"‚ö´ {team1_names} üÜö {team2_names}\n"
                        else:
                            winner_names = await self.get_team_names(match.get('winner', []), context, chat_id)
                            bracket_text += f"‚úÖ {winner_names} {score_text} üèÜ\n"
                    
                    bracket_text += "\n"
                except (ValueError, IndexError) as e:
                    logger.error(f"Error processing round {round_key}: {e}")
                    continue
        
        await update.message.reply_text(bracket_text)
    
    async def create_next_round(self, update: Update, context: ContextTypes.DEFAULT_TYPE, winners_flat: List[int]):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞"""
        chat_id = update.effective_chat.id
        tournament = active_tournaments.get(chat_id, {})
        bracket = tournament.get('bracket', {})
        current_round = bracket.get('current_round', 'round_1')
        
        try:
            next_round = f"round_{int(current_round.split('_')[1]) + 1}"
        except (ValueError, IndexError):
            next_round = "round_2"
        
        if tournament.get('format') == '1v1':
            next_matches = self.create_1v1_bracket(winners_flat)
        else:
            next_matches = self.create_team_bracket(winners_flat, tournament.get('format', '2v2'))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á—ë—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π
        for new_match in next_matches:
            match_scores[new_match.get('match_id', 0)] = {'team1_wins': 0, 'team2_wins': 0}
        
        bracket[next_round] = next_matches
        bracket['current_round'] = next_round
        
        try:
            if tournament.get('id'):
                self.db.update_tournament_bracket(tournament['id'], bracket)
        except Exception as e:
            logger.error(f"Error updating bracket: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        if len(next_matches) == 1:
            round_name = "üèÜ –§–ò–ù–ê–õ –¢–£–†–ù–ò–†–ê!"
        elif len(next_matches) == 2:
            round_name = "üéØ –ü–û–õ–£–§–ò–ù–ê–õ!"
        else:
            round_name = f"‚öîÔ∏è –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥"
        
        next_round_text = f"üîÑ {round_name}\n\n"
        
        for i, match in enumerate(next_matches, 1):
            team1_names = await self.get_team_names(match.get('team1', []), context, chat_id)
            team2_names = await self.get_team_names(match.get('team2', []), context, chat_id) 
            next_round_text += f"–ú–∞—Ç—á #{i}: {team1_names} üÜö {team2_names}\n"
        
        next_round_text += f"\nüõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /winner [–Ω–æ–º–µ—Ä] [1–∏–ª–∏2] –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!"
        
        await update.message.reply_text(next_round_text)
    
    async def finish_tournament_by_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
        chat_id = update.effective_chat.id
        tournament = active_tournaments.get(chat_id, {})
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑–µ—Ä–æ–≤
        winners_data = self.determine_tournament_winners(tournament)
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        winners_text = ""
        for i, winner_data in enumerate(winners_data[:3]):
            place = i + 1
            team = winner_data.get('team', [])
            
            xp_rewards = {1: 100, 2: 75, 3: 50}
            xp = xp_rewards.get(place, 0)
            
            for user_id in team:
                try:
                    self.db.add_tournament_win(user_id, place)
                except Exception as e:
                    logger.error(f"Error adding win for user {user_id}: {e}")
            
            team_names = await self.get_team_names(team, context, chat_id)
            
            if place == 1:
                winners_text += f"ü•á 1 –º–µ—Å—Ç–æ ‚Äî {team_names} (+{xp} XP)\n"
            elif place == 2:
                winners_text += f"ü•à 2 –º–µ—Å—Ç–æ ‚Äî {team_names} (+{xp} XP)\n"
            elif place == 3:
                winners_text += f"ü•â 3 –º–µ—Å—Ç–æ ‚Äî {team_names} (+{xp} XP)\n"
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
        try:
            if tournament.get('id'):
                self.db.finish_tournament(tournament['id'])
        except Exception as e:
            logger.error(f"Error finishing tournament: {e}")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π
        bracket = tournament.get('bracket', {})
        for round_key in bracket.keys():
            if round_key.startswith('round_'):
                for match in bracket[round_key]:
                    match_id = match.get('match_id', 0)
                    if match_id in match_scores:
                        del match_scores[match_id]
        
        if chat_id in active_tournaments:
            del active_tournaments[chat_id]
        if chat_id in user_participation_tracker:
            del user_participation_tracker[chat_id]
        
        format_name = TOURNAMENT_FORMATS.get(tournament.get('format', '1v1'), tournament.get('format', '1v1'))
        final_message = f"""üèÅ –¢—É—Ä–Ω–∏—Ä {format_name} –∑–∞–≤–µ—Ä—à—ë–Ω!

{winners_text}

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!
üéÆ –°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –∑–∞ —É—á–∞—Å—Ç–∏–µ!

XP –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤

üìÜ –•–æ—Ç–∏—Ç–µ –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"""
        
        await update.message.reply_text(final_message)

    async def new_member(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É"""
        for member in update.message.new_chat_members:
            if member.id == context.bot.id:
                try:
                    await self.send_welcome_message(update, context)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ new_member: {e}")
                    keyboard = [
                        [
                            InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="start_tournament"),
                            InlineKeyboardButton("üóì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_tournament")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ Brawl Stars!",
                        reply_markup=reply_markup
                    )
                break


async def setup_bot_commands(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞"""
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π /help_win
    updated_commands = BOT_COMMANDS + [
        ("help_win", "–ü–æ–º–æ—â—å –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)")
    ]
    commands = [BotCommand(command, description) for command, description in updated_commands]
    await application.bot.set_my_commands(commands)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
    bot = TournamentBot()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("winner", bot.winner_command))
    application.add_handler(CommandHandler("matches", bot.matches_command))  
    application.add_handler(CommandHandler("bracket", bot.bracket_command))
    application.add_handler(CommandHandler("help_win", bot.help_win_command))  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    application.add_handler(CommandHandler("top", bot.top_command))
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("profile", bot.profile_command))
    application.add_handler(CommandHandler("setcups", bot.setcups_command))
    application.add_handler(CommandHandler("setclan", bot.setclan_command))
    application.add_handler(CommandHandler("ranks", bot.ranks_command))
    application.add_handler(CommandHandler("giverole", bot.giverole_command))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("stats", bot.stats_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(bot.button_callback))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å—ã
    application.add_handler(PollAnswerHandler(bot.poll_answer))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    application.add_handler(MessageHandler(
        filters.StatusUpdate.NEW_CHAT_MEMBERS, 
        bot.new_member
    ))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    async def post_init(app):
        await setup_bot_commands(app)
    
    application.post_init = post_init
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ Brawl Stars Tournament Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üìã –ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
    print("‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–Ω–µ–¥—Ä–µ–Ω—ã:")
    print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ KeyError: 'current_round'")
    print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã fallback –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –ë–î")
    print("   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 6 –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ 2v2/3v3")
    print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–ª–∏ Owner")
    print("   ‚Ä¢ –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
    print("   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å try/except –±–ª–æ–∫–∞–º–∏")
    print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è get_rank_by_xp()")
    print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞ InlineKeyboardButton")
    print(f"   ‚Ä¢ –†–æ–ª—å 'owner' –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {OWNER_ID}")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

Thread(target=run_web, daemon=True).start()

if __name__ == '__main__':
    main()
