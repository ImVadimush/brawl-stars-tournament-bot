# moderation.py
"""
–ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Telegram-–±–æ—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ Brawl Stars
"""

import asyncio
import logging
import re
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple

from telegram import Update, ChatMember, ChatPermissions
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from telegram.error import BadRequest, Forbidden

from database import DatabaseManager
from config import OWNER_ID

logger = logging.getLogger(__name__)

def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown v2"""
    if not text:
        return ""
        
    text = str(text)
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown v2
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
        
    return text

def clean_markdown(text):
    """–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ Markdown —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
        
    text = str(text)
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    problematic_chars = ['*', '_', '`', '[', ']', '(', ')', '~', '>', '#']
        
    for char in problematic_chars:
        text = text.replace(char, '')
        
    return text

class ModerationManager:
    def __init__(self, db: DatabaseManager):
        self.db = db
        self.temp_restrictions = {}  # chat_id: {user_id: end_time}
        
    def init_moderation_tables(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            import sqlite3
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS warnings (
                        warning_id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        chat_id INTEGER,
                        moderator_id INTEGER,
                        reason TEXT,
                        count INTEGER DEFAULT 1,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                # –¢–∞–±–ª–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS moderation_actions (
                        action_id INTEGER PRIMARY KEY AUTOINCREMENT,
                        chat_id INTEGER,
                        user_id INTEGER,
                        moderator_id INTEGER,
                        action_type TEXT,
                        reason TEXT,
                        duration TEXT,
                        end_time TIMESTAMP,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                conn.commit()
                logger.info("Moderation tables initialized successfully")
        except Exception as e:
            logger.error(f"Error initializing moderation tables: {e}")

    async def check_moderator_permissions(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞
        if user_id == OWNER_ID:
            return True
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user = self.db.get_user(user_id)
            if user and user.get('role') in ['moderator', 'admin', 'owner']:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ
            member = await context.bot.get_chat_member(chat_id, user_id)
            if member.status in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]:
                return True
                
        except Exception as e:
            logger.error(f"Error checking moderator permissions: {e}")
        
        return False

    def parse_time_duration(self, duration_str: str) -> Optional[timedelta]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ timedelta"""
        if not duration_str:
            return None
            
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10m, 2h, 1d)
        time_regex = re.match(r'^(\d+)([mhd])$', duration_str.lower())
        if not time_regex:
            return None
        
        amount = int(time_regex.group(1))
        unit = time_regex.group(2)
        
        if unit == 'm':
            return timedelta(minutes=amount)
        elif unit == 'h':
            return timedelta(hours=amount)
        elif unit == 'd':
            return timedelta(days=amount)
        
        return None

    def add_warning(self, user_id: int, chat_id: int, moderator_id: int, reason: str) -> int:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            import sqlite3
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                cursor.execute('''
                    SELECT COUNT(*) FROM warnings 
                    WHERE user_id = ? AND chat_id = ? 
                    AND created_at > datetime('now', '-30 days')
                ''', (user_id, chat_id))
                
                current_warnings = cursor.fetchone()[0]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                cursor.execute('''
                    INSERT INTO warnings (user_id, chat_id, moderator_id, reason, count)
                    VALUES (?, ?, ?, ?, ?)
                ''', (user_id, chat_id, moderator_id, reason, current_warnings + 1))
                
                conn.commit()
                return current_warnings + 1
                
        except Exception as e:
            logger.error(f"Error adding warning: {e}")
            return 0

    def log_moderation_action(self, chat_id: int, user_id: int, moderator_id: int, 
                             action_type: str, reason: str, duration: str = None, 
                             end_time: datetime = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            import sqlite3
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO moderation_actions 
                    (chat_id, user_id, moderator_id, action_type, reason, duration, end_time)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (chat_id, user_id, moderator_id, action_type, reason, duration, end_time))
                conn.commit()
        except Exception as e:
            logger.error(f"Error logging moderation action: {e}")

    async def mute_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –º—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö!")
            return
            
        if not await self.check_moderator_permissions(update, context):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        args = context.args if hasattr(context, 'args') and context.args else []
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä—É—Å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ !–º—É—Ç, –ø–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if update.message.text and (update.message.text.startswith('!–º—É—Ç') or update.message.text.startswith('!mute')):
            args = update.message.text.split()[1:]  # –£–±–∏—Ä–∞–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
        
        if len(args) < 1:
            await update.message.reply_text(
                "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "<code>/mute –ø—Ä–∏—á–∏–Ω–∞ [–≤—Ä–µ–º—è]</code> –∏–ª–∏ <code>!–º—É—Ç –ø—Ä–∏—á–∏–Ω–∞ [–≤—Ä–µ–º—è]</code>\n\n"
                "üìù <b>–ü—Ä–∏–º–µ—Ä:</b> <code>/mute —Å–ø–∞–º 30m</code>\n"
                "‚è∞ <b>–í—Ä–µ–º—è:</b> m (–º–∏–Ω—É—Ç—ã), h (—á–∞—Å—ã), d (–¥–Ω–∏)\n"
                "üí¨ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                parse_mode='HTML'
            )
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if update.message.reply_to_message:
                target_user = update.message.reply_to_message.from_user
            else:
                await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return

            # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –∏ –≤—Ä–µ–º—è
            reason_and_time = " ".join(args)
            parts = reason_and_time.rsplit(' ', 1)
            
            if len(parts) == 2 and self.parse_time_duration(parts[1]):
                reason = parts[0]
                duration_str = parts[1]
                duration = self.parse_time_duration(duration_str)
            else:
                reason = reason_and_time
                duration_str = "–Ω–∞–≤—Å–µ–≥–¥–∞"
                duration = None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –º—É—Ç–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            target_member = await context.bot.get_chat_member(update.effective_chat.id, target_user.id)
            if target_member.status in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]:
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
                return

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            permissions = ChatPermissions(
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_polls=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False,
                can_change_info=False,
                can_invite_users=False,
                can_pin_messages=False
            )

            if duration:
                until_date = datetime.now() + duration
                await context.bot.restrict_chat_member(
                    chat_id=update.effective_chat.id,
                    user_id=target_user.id,
                    permissions=permissions,
                    until_date=until_date
                )
                time_text = f"–Ω–∞ {duration_str}"
            else:
                await context.bot.restrict_chat_member(
                    chat_id=update.effective_chat.id,
                    user_id=target_user.id,
                    permissions=permissions
                )
                time_text = "–Ω–∞–≤—Å–µ–≥–¥–∞"

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            self.log_moderation_action(
                update.effective_chat.id, target_user.id, update.effective_user.id,
                "mute", reason, duration_str, 
                datetime.now() + duration if duration else None
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            moderator_name = update.effective_user.first_name
            target_name = target_user.first_name
            
            message_text = (
                f"üîá <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_name}\n"
                f"üëÆ‚Äç‚ôÇÔ∏è <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:</b> {moderator_name}\n"
                f"‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {time_text}\n"
                f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}"
            )
            
            await update.message.reply_text(message_text, parse_mode='HTML')

        except BadRequest as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        except Exception as e:
            logger.error(f"Error in mute command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

    async def ban_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö!")
            return
            
        if not await self.check_moderator_permissions(update, context):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return

        args = context.args if hasattr(context, 'args') and context.args else []
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä—É—Å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ !–±–∞–Ω, –ø–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if update.message.text and (update.message.text.startswith('!–±–∞–Ω') or update.message.text.startswith('!ban')):
            args = update.message.text.split()[1:]

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if update.message.reply_to_message:
                target_user = update.message.reply_to_message.from_user
            else:
                await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return

            # –ü–∞—Ä—Å–∏–º –ø—Ä–∏—á–∏–Ω—É –∏ –≤—Ä–µ–º—è
            reason_and_time = " ".join(args) if args else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            parts = reason_and_time.rsplit(' ', 1)
            
            if len(parts) == 2 and self.parse_time_duration(parts[1]):
                reason = parts[0]
                duration_str = parts[1]
                duration = self.parse_time_duration(duration_str)
            else:
                reason = reason_and_time or "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
                duration_str = "–Ω–∞–≤—Å–µ–≥–¥–∞"
                duration = None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_member = await context.bot.get_chat_member(update.effective_chat.id, target_user.id)
            if target_member.status in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]:
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
                return

            # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if duration:
                until_date = datetime.now() + duration
                await context.bot.ban_chat_member(
                    chat_id=update.effective_chat.id,
                    user_id=target_user.id,
                    until_date=until_date,
                    revoke_messages=True
                )
                time_text = f"–Ω–∞ {duration_str}"
            else:
                await context.bot.ban_chat_member(
                    chat_id=update.effective_chat.id,
                    user_id=target_user.id,
                    revoke_messages=True
                )
                time_text = "–Ω–∞–≤—Å–µ–≥–¥–∞"

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            self.log_moderation_action(
                update.effective_chat.id, target_user.id, update.effective_user.id,
                "ban", reason, duration_str,
                datetime.now() + duration if duration else None
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            moderator_name = update.effective_user.first_name
            target_name = target_user.first_name
            
            message_text = (
                f"üî® <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_name}\n"
                f"üëÆ‚Äç‚ôÇÔ∏è <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:</b> {moderator_name}\n"
                f"‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {time_text}\n"
                f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}"
            )
            
            await update.message.reply_text(message_text, parse_mode='HTML')

        except BadRequest as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        except Exception as e:
            logger.error(f"Error in ban command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

    async def kick_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –∫–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö!")
            return
            
        if not await self.check_moderator_permissions(update, context):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return

        args = context.args if hasattr(context, 'args') and context.args else []
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä—É—Å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ !–∫–∏–∫, –ø–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if update.message.text and (update.message.text.startswith('!–∫–∏–∫') or update.message.text.startswith('!kick')):
            args = update.message.text.split()[1:]

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if update.message.reply_to_message:
                target_user = update.message.reply_to_message.from_user
                reason = " ".join(args) or "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            else:
                await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_member = await context.bot.get_chat_member(update.effective_chat.id, target_user.id)
            if target_member.status in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]:
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
                return

            # –ö–∏–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–∞–Ω + —Ä–∞–∑–±–∞–Ω)
            await context.bot.ban_chat_member(
                chat_id=update.effective_chat.id,
                user_id=target_user.id,
                revoke_messages=False
            )
            
            await context.bot.unban_chat_member(
                chat_id=update.effective_chat.id,
                user_id=target_user.id
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            self.log_moderation_action(
                update.effective_chat.id, target_user.id, update.effective_user.id,
                "kick", reason
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            moderator_name = update.effective_user.first_name
            target_name = target_user.first_name
            
            message_text = (
                f"üë¢ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_name}\n"
                f"üëÆ‚Äç‚ôÇÔ∏è <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:</b> {moderator_name}\n"
                f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}"
            )
            
            await update.message.reply_text(message_text, parse_mode='HTML')

        except BadRequest as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        except Exception as e:
            logger.error(f"Error in kick command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

    async def warn_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö!")
            return
            
        if not await self.check_moderator_permissions(update, context):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return

        args = context.args if hasattr(context, 'args') and context.args else []
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä—É—Å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ !–ø—Ä–µ–¥, –ø–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if update.message.text and (update.message.text.startswith('!–ø—Ä–µ–¥') or update.message.text.startswith('!warn')):
            args = update.message.text.split()[1:]

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if update.message.reply_to_message:
                target_user = update.message.reply_to_message.from_user
                reason = " ".join(args) or "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            else:
                await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_member = await context.bot.get_chat_member(update.effective_chat.id, target_user.id)
            if target_member.status in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]:
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            warning_count = self.add_warning(
                target_user.id, update.effective_chat.id, 
                update.effective_user.id, reason
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            moderator_name = update.effective_user.first_name
            target_name = target_user.first_name
            
            message_text = (
                f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_name}\n"
                f"üëÆ‚Äç‚ôÇÔ∏è <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:</b> {moderator_name}\n"
                f"üìä <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b> {warning_count}/3\n"
                f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}"
            )
            
            await update.message.reply_text(message_text, parse_mode='HTML')

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º—É—Ç –Ω–∞ 3-–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏
            if warning_count >= 3:
                permissions = ChatPermissions(
                    can_send_messages=False,
                    can_send_media_messages=False,
                    can_send_polls=False,
                    can_send_other_messages=False,
                    can_add_web_page_previews=False,
                    can_change_info=False,
                    can_invite_users=False,
                    can_pin_messages=False
                )

                until_date = datetime.now() + timedelta(days=1)
                await context.bot.restrict_chat_member(
                    chat_id=update.effective_chat.id,
                    user_id=target_user.id,
                    permissions=permissions,
                    until_date=until_date
                )

                # –õ–æ–≥–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º—É—Ç
                self.log_moderation_action(
                    update.effective_chat.id, target_user.id, context.bot.id,
                    "auto_mute", "3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "1d", until_date
                )

                auto_mute_text = (
                    f"üîá <b>–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ú–£–¢</b>\n\n"
                    f"üë§ <b>{target_name}</b> –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ 1 –¥–µ–Ω—å –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è!"
                )
                
                await update.message.reply_text(auto_mute_text, parse_mode='HTML')

        except BadRequest as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        except Exception as e:
            logger.error(f"Error in warn command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

    async def show_moderation_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        if not await self.check_moderator_permissions(update, context):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return

        help_text = """üõ°Ô∏è <b>–ö–û–ú–ê–ù–î–´ –ú–û–î–ï–†–ê–¶–ò–ò</b>

üìå <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

üîá <b>–ó–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>
<code>/mute –ø—Ä–∏—á–∏–Ω–∞ [–≤—Ä–µ–º—è]</code>
<code>!–º—É—Ç –ø—Ä–∏—á–∏–Ω–∞ [–≤—Ä–µ–º—è]</code>

üî® <b>–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>
<code>/ban –ø—Ä–∏—á–∏–Ω–∞ [–≤—Ä–µ–º—è]</code>
<code>!–±–∞–Ω –ø—Ä–∏—á–∏–Ω–∞ [–≤—Ä–µ–º—è]</code>

üë¢ <b>–ö–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>
<code>/kick –ø—Ä–∏—á–∏–Ω–∞</code>
<code>!–∫–∏–∫ –ø—Ä–∏—á–∏–Ω–∞</code>

‚ö†Ô∏è <b>–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</b>
<code>/warn –ø—Ä–∏—á–∏–Ω–∞</code>
<code>!–ø—Ä–µ–¥ –ø—Ä–∏—á–∏–Ω–∞</code>

üìã <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>
<code>/moderation</code>

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üîß <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1Ô∏è‚É£ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è
2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–∏—á–∏–Ω–æ–π
3Ô∏è‚É£ –î–ª—è –º—É—Ç–∞/–±–∞–Ω–∞ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è

‚è∞ <b>–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏:</b>
‚Ä¢ <code>10m</code> - 10 –º–∏–Ω—É—Ç
‚Ä¢ <code>2h</code> - 2 —á–∞—Å–∞  
‚Ä¢ <code>1d</code> - 1 –¥–µ–Ω—å

üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
<code>/mute —Å–ø–∞–º 30m</code>
<code>!–º—É—Ç —Ä–µ–∫–ª–∞–º–∞ 1h</code>
<code>/ban —Ñ–ª—É–¥ 1d</code>
<code>!–ø—Ä–µ–¥ –º–∞—Ç</code>

‚ö° <b>–ü—Ä–∞–≤–∞:</b> —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"""

        await update.message.reply_text(help_text, parse_mode='HTML')

    def get_command_handlers(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã)"""
        return [
            CommandHandler('mute', self.mute_user, filters=filters.ChatType.GROUPS),
            CommandHandler('ban', self.ban_user, filters=filters.ChatType.GROUPS),
            CommandHandler('kick', self.kick_user, filters=filters.ChatType.GROUPS),
            CommandHandler('warn', self.warn_user, filters=filters.ChatType.GROUPS),
            CommandHandler('moderation', self.show_moderation_help, filters=filters.ChatType.GROUPS),
        ]

    def get_message_handlers(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Ä—É—Å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å !)"""
        return [
            MessageHandler(filters.TEXT & filters.Regex(r'^!–º—É—Ç\b') & filters.ChatType.GROUPS, self.mute_user),
            MessageHandler(filters.TEXT & filters.Regex(r'^!–±–∞–Ω\b') & filters.ChatType.GROUPS, self.ban_user),
            MessageHandler(filters.TEXT & filters.Regex(r'^!–∫–∏–∫\b') & filters.ChatType.GROUPS, self.kick_user),
            MessageHandler(filters.TEXT & filters.Regex(r'^!–ø—Ä–µ–¥\b') & filters.ChatType.GROUPS, self.warn_user),
        ]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
def setup_moderation(application, db: DatabaseManager):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    moderation = ModerationManager(db)
    moderation.init_moderation_tables()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ)
    for handler in moderation.get_command_handlers():
        application.add_handler(handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä—É—Å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å !)
    for handler in moderation.get_message_handlers():
        application.add_handler(handler)
    
    logger.info("Moderation system initialized successfully")
    return moderation